
XmegaBootloaderNRF24L01p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f64  00060000  00060000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00802000  00060f64  00000ff8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000439  00802030  00802030  00001028  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001058  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005f0  00000000  00000000  00001098  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006f4e  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e6e  00000000  00000000  000085d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002cc0  00000000  00000000  00009444  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000014c4  00000000  00000000  0000c104  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000029c9  00000000  00000000  0000d5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000051ce  00000000  00000000  0000ff91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000618  00000000  00000000  0001515f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00060000 <__vectors>:
   60000:	1d 94 fe 00 	jmp	0x601fc	; 0x601fc <__ctors_end>
   60004:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60008:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   6000c:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60010:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60014:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60018:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   6001c:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60020:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60024:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60028:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   6002c:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60030:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60034:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60038:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   6003c:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60040:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60044:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60048:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   6004c:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60050:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60054:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60058:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   6005c:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60060:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60064:	1d 94 b2 06 	jmp	0x60d64	; 0x60d64 <__vector_25>
   60068:	1d 94 c6 06 	jmp	0x60d8c	; 0x60d8c <__vector_26>
   6006c:	1d 94 bc 06 	jmp	0x60d78	; 0x60d78 <__vector_27>
   60070:	1d 94 d0 06 	jmp	0x60da0	; 0x60da0 <__vector_28>
   60074:	1d 94 e4 06 	jmp	0x60dc8	; 0x60dc8 <__vector_29>
   60078:	1d 94 da 06 	jmp	0x60db4	; 0x60db4 <__vector_30>
   6007c:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60080:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60084:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60088:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   6008c:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60090:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60094:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60098:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   6009c:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   600a0:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   600a4:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   600a8:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   600ac:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   600b0:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   600b4:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   600b8:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   600bc:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   600c0:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   600c4:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   600c8:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   600cc:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   600d0:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   600d4:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   600d8:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   600dc:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   600e0:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   600e4:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   600e8:	1d 94 0c 07 	jmp	0x60e18	; 0x60e18 <__vector_58>
   600ec:	1d 94 20 07 	jmp	0x60e40	; 0x60e40 <__vector_59>
   600f0:	1d 94 16 07 	jmp	0x60e2c	; 0x60e2c <__vector_60>
   600f4:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   600f8:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   600fc:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60100:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60104:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60108:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   6010c:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60110:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60114:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60118:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   6011c:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60120:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60124:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60128:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   6012c:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60130:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60134:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60138:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   6013c:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60140:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60144:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60148:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   6014c:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60150:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60154:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60158:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   6015c:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60160:	1d 94 ee 06 	jmp	0x60ddc	; 0x60ddc <__vector_88>
   60164:	1d 94 02 07 	jmp	0x60e04	; 0x60e04 <__vector_89>
   60168:	1d 94 f8 06 	jmp	0x60df0	; 0x60df0 <__vector_90>
   6016c:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60170:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60174:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60178:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   6017c:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60180:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60184:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60188:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   6018c:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60190:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60194:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   60198:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   6019c:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   601a0:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   601a4:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   601a8:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   601ac:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   601b0:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   601b4:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   601b8:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   601bc:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   601c0:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   601c4:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   601c8:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   601cc:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   601d0:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   601d4:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   601d8:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   601dc:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   601e0:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   601e4:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   601e8:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   601ec:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   601f0:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   601f4:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>
   601f8:	1d 94 1f 01 	jmp	0x6023e	; 0x6023e <__bad_interrupt>

000601fc <__ctors_end>:
   601fc:	11 24       	eor	r1, r1
   601fe:	1f be       	out	0x3f, r1	; 63
   60200:	cf ef       	ldi	r28, 0xFF	; 255
   60202:	cd bf       	out	0x3d, r28	; 61
   60204:	df e9       	ldi	r29, 0x9F	; 159
   60206:	de bf       	out	0x3e, r29	; 62
   60208:	03 e0       	ldi	r16, 0x03	; 3
   6020a:	0c bf       	out	0x3c, r16	; 60

0006020c <__do_copy_data>:
   6020c:	10 e2       	ldi	r17, 0x20	; 32
   6020e:	a0 e0       	ldi	r26, 0x00	; 0
   60210:	b0 e2       	ldi	r27, 0x20	; 32
   60212:	e4 e6       	ldi	r30, 0x64	; 100
   60214:	ff e0       	ldi	r31, 0x0F	; 15
   60216:	06 e0       	ldi	r16, 0x06	; 6
   60218:	0b bf       	out	0x3b, r16	; 59
   6021a:	02 c0       	rjmp	.+4      	; 0x60220 <__do_copy_data+0x14>
   6021c:	07 90       	elpm	r0, Z+
   6021e:	0d 92       	st	X+, r0
   60220:	a0 33       	cpi	r26, 0x30	; 48
   60222:	b1 07       	cpc	r27, r17
   60224:	d9 f7       	brne	.-10     	; 0x6021c <__do_copy_data+0x10>

00060226 <__do_clear_bss>:
   60226:	24 e2       	ldi	r18, 0x24	; 36
   60228:	a0 e3       	ldi	r26, 0x30	; 48
   6022a:	b0 e2       	ldi	r27, 0x20	; 32
   6022c:	01 c0       	rjmp	.+2      	; 0x60230 <.do_clear_bss_start>

0006022e <.do_clear_bss_loop>:
   6022e:	1d 92       	st	X+, r1

00060230 <.do_clear_bss_start>:
   60230:	a9 36       	cpi	r26, 0x69	; 105
   60232:	b2 07       	cpc	r27, r18
   60234:	e1 f7       	brne	.-8      	; 0x6022e <.do_clear_bss_loop>
   60236:	1f 94 f3 05 	call	0x60be6	; 0x60be6 <main>
   6023a:	1d 94 b0 07 	jmp	0x60f60	; 0x60f60 <_exit>

0006023e <__bad_interrupt>:
   6023e:	1d 94 00 00 	jmp	0x60000	; 0x60000 <__vectors>

00060242 <arch_spi_master_transmit_byte_val>:

	else {//if pipe not readable
		return 0;
	}
	return 0;	
}
   60242:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
   60246:	e0 ec       	ldi	r30, 0xC0	; 192
   60248:	f8 e0       	ldi	r31, 0x08	; 8
   6024a:	82 81       	ldd	r24, Z+2	; 0x02
   6024c:	88 23       	and	r24, r24
   6024e:	ec f7       	brge	.-6      	; 0x6024a <arch_spi_master_transmit_byte_val+0x8>
   60250:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
   60254:	08 95       	ret

00060256 <arch_spi_master_transmit_byte_ref>:
   60256:	fc 01       	movw	r30, r24
   60258:	80 81       	ld	r24, Z
   6025a:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
   6025e:	e0 ec       	ldi	r30, 0xC0	; 192
   60260:	f8 e0       	ldi	r31, 0x08	; 8
   60262:	82 81       	ldd	r24, Z+2	; 0x02
   60264:	88 23       	and	r24, r24
   60266:	ec f7       	brge	.-6      	; 0x60262 <arch_spi_master_transmit_byte_ref+0xc>
   60268:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
   6026c:	08 95       	ret

0006026e <_nrf24l01p_ce_pin>:
   6026e:	cf 93       	push	r28
   60270:	c8 2f       	mov	r28, r24
   60272:	88 23       	and	r24, r24
   60274:	29 f0       	breq	.+10     	; 0x60280 <_nrf24l01p_ce_pin+0x12>
   60276:	80 e0       	ldi	r24, 0x00	; 0
   60278:	90 e2       	ldi	r25, 0x20	; 32
   6027a:	1f 94 92 06 	call	0x60d24	; 0x60d24 <DigitalPin_SetValue>
   6027e:	04 c0       	rjmp	.+8      	; 0x60288 <_nrf24l01p_ce_pin+0x1a>
   60280:	80 e0       	ldi	r24, 0x00	; 0
   60282:	90 e2       	ldi	r25, 0x20	; 32
   60284:	1f 94 a2 06 	call	0x60d44	; 0x60d44 <DigitalPin_ClearValue>
   60288:	c0 93 34 20 	sts	0x2034, r28	; 0x802034 <ce_value>
   6028c:	cf 91       	pop	r28
   6028e:	08 95       	ret

00060290 <_nrf24l01p_csn_pin>:
   60290:	cf 93       	push	r28
   60292:	c8 2f       	mov	r28, r24
   60294:	88 23       	and	r24, r24
   60296:	29 f0       	breq	.+10     	; 0x602a2 <_nrf24l01p_csn_pin+0x12>
   60298:	83 e0       	ldi	r24, 0x03	; 3
   6029a:	90 e2       	ldi	r25, 0x20	; 32
   6029c:	1f 94 92 06 	call	0x60d24	; 0x60d24 <DigitalPin_SetValue>
   602a0:	04 c0       	rjmp	.+8      	; 0x602aa <_nrf24l01p_csn_pin+0x1a>
   602a2:	83 e0       	ldi	r24, 0x03	; 3
   602a4:	90 e2       	ldi	r25, 0x20	; 32
   602a6:	1f 94 a2 06 	call	0x60d44	; 0x60d44 <DigitalPin_ClearValue>
   602aa:	c0 93 33 20 	sts	0x2033, r28	; 0x802033 <csn_value>
   602ae:	cf 91       	pop	r28
   602b0:	08 95       	ret

000602b2 <_nrf24l01p_read_register>:
   602b2:	ef 92       	push	r14
   602b4:	ff 92       	push	r15
   602b6:	0f 93       	push	r16
   602b8:	1f 93       	push	r17
   602ba:	cf 93       	push	r28
   602bc:	df 93       	push	r29
   602be:	c8 2f       	mov	r28, r24
   602c0:	7b 01       	movw	r14, r22
   602c2:	8a 01       	movw	r16, r20
   602c4:	80 e0       	ldi	r24, 0x00	; 0
   602c6:	1f 94 48 01 	call	0x60290	; 0x60290 <_nrf24l01p_csn_pin>
   602ca:	8c 2f       	mov	r24, r28
   602cc:	8f 71       	andi	r24, 0x1F	; 31
   602ce:	1f 94 21 01 	call	0x60242	; 0x60242 <arch_spi_master_transmit_byte_val>
   602d2:	10 16       	cp	r1, r16
   602d4:	11 06       	cpc	r1, r17
   602d6:	94 f4       	brge	.+36     	; 0x602fc <_nrf24l01p_read_register+0x4a>
   602d8:	e7 01       	movw	r28, r14
   602da:	0e 0d       	add	r16, r14
   602dc:	1f 1d       	adc	r17, r15
   602de:	0f 2e       	mov	r0, r31
   602e0:	f0 ec       	ldi	r31, 0xC0	; 192
   602e2:	ef 2e       	mov	r14, r31
   602e4:	f8 e0       	ldi	r31, 0x08	; 8
   602e6:	ff 2e       	mov	r15, r31
   602e8:	f0 2d       	mov	r31, r0
   602ea:	8f ef       	ldi	r24, 0xFF	; 255
   602ec:	1f 94 21 01 	call	0x60242	; 0x60242 <arch_spi_master_transmit_byte_val>
   602f0:	f7 01       	movw	r30, r14
   602f2:	83 81       	ldd	r24, Z+3	; 0x03
   602f4:	89 93       	st	Y+, r24
   602f6:	c0 17       	cp	r28, r16
   602f8:	d1 07       	cpc	r29, r17
   602fa:	b9 f7       	brne	.-18     	; 0x602ea <_nrf24l01p_read_register+0x38>
   602fc:	81 e0       	ldi	r24, 0x01	; 1
   602fe:	1f 94 48 01 	call	0x60290	; 0x60290 <_nrf24l01p_csn_pin>
   60302:	df 91       	pop	r29
   60304:	cf 91       	pop	r28
   60306:	1f 91       	pop	r17
   60308:	0f 91       	pop	r16
   6030a:	ff 90       	pop	r15
   6030c:	ef 90       	pop	r14
   6030e:	08 95       	ret

00060310 <_nrf24l01p_write_register>:
   60310:	ef 92       	push	r14
   60312:	ff 92       	push	r15
   60314:	0f 93       	push	r16
   60316:	1f 93       	push	r17
   60318:	cf 93       	push	r28
   6031a:	df 93       	push	r29
   6031c:	c8 2f       	mov	r28, r24
   6031e:	7b 01       	movw	r14, r22
   60320:	8a 01       	movw	r16, r20
   60322:	80 e0       	ldi	r24, 0x00	; 0
   60324:	1f 94 48 01 	call	0x60290	; 0x60290 <_nrf24l01p_csn_pin>
   60328:	8c 2f       	mov	r24, r28
   6032a:	8f 71       	andi	r24, 0x1F	; 31
   6032c:	80 62       	ori	r24, 0x20	; 32
   6032e:	1f 94 21 01 	call	0x60242	; 0x60242 <arch_spi_master_transmit_byte_val>
   60332:	10 16       	cp	r1, r16
   60334:	11 06       	cpc	r1, r17
   60336:	54 f4       	brge	.+20     	; 0x6034c <_nrf24l01p_write_register+0x3c>
   60338:	e7 01       	movw	r28, r14
   6033a:	0e 0d       	add	r16, r14
   6033c:	1f 1d       	adc	r17, r15
   6033e:	ce 01       	movw	r24, r28
   60340:	1f 94 2b 01 	call	0x60256	; 0x60256 <arch_spi_master_transmit_byte_ref>
   60344:	21 96       	adiw	r28, 0x01	; 1
   60346:	c0 17       	cp	r28, r16
   60348:	d1 07       	cpc	r29, r17
   6034a:	c9 f7       	brne	.-14     	; 0x6033e <_nrf24l01p_write_register+0x2e>
   6034c:	81 e0       	ldi	r24, 0x01	; 1
   6034e:	1f 94 48 01 	call	0x60290	; 0x60290 <_nrf24l01p_csn_pin>
   60352:	df 91       	pop	r29
   60354:	cf 91       	pop	r28
   60356:	1f 91       	pop	r17
   60358:	0f 91       	pop	r16
   6035a:	ff 90       	pop	r15
   6035c:	ef 90       	pop	r14
   6035e:	08 95       	ret

00060360 <_nrf24l01p_read_rx_payload>:
   60360:	ef 92       	push	r14
   60362:	ff 92       	push	r15
   60364:	0f 93       	push	r16
   60366:	1f 93       	push	r17
   60368:	cf 93       	push	r28
   6036a:	df 93       	push	r29
   6036c:	7c 01       	movw	r14, r24
   6036e:	8b 01       	movw	r16, r22
   60370:	80 e0       	ldi	r24, 0x00	; 0
   60372:	1f 94 48 01 	call	0x60290	; 0x60290 <_nrf24l01p_csn_pin>
   60376:	81 e6       	ldi	r24, 0x61	; 97
   60378:	1f 94 21 01 	call	0x60242	; 0x60242 <arch_spi_master_transmit_byte_val>
   6037c:	10 16       	cp	r1, r16
   6037e:	11 06       	cpc	r1, r17
   60380:	94 f4       	brge	.+36     	; 0x603a6 <_nrf24l01p_read_rx_payload+0x46>
   60382:	e7 01       	movw	r28, r14
   60384:	0e 0d       	add	r16, r14
   60386:	1f 1d       	adc	r17, r15
   60388:	0f 2e       	mov	r0, r31
   6038a:	f0 ec       	ldi	r31, 0xC0	; 192
   6038c:	ef 2e       	mov	r14, r31
   6038e:	f8 e0       	ldi	r31, 0x08	; 8
   60390:	ff 2e       	mov	r15, r31
   60392:	f0 2d       	mov	r31, r0
   60394:	8f ef       	ldi	r24, 0xFF	; 255
   60396:	1f 94 21 01 	call	0x60242	; 0x60242 <arch_spi_master_transmit_byte_val>
   6039a:	f7 01       	movw	r30, r14
   6039c:	93 81       	ldd	r25, Z+3	; 0x03
   6039e:	99 93       	st	Y+, r25
   603a0:	c0 17       	cp	r28, r16
   603a2:	d1 07       	cpc	r29, r17
   603a4:	b9 f7       	brne	.-18     	; 0x60394 <_nrf24l01p_read_rx_payload+0x34>
   603a6:	81 e0       	ldi	r24, 0x01	; 1
   603a8:	1f 94 48 01 	call	0x60290	; 0x60290 <_nrf24l01p_csn_pin>
   603ac:	df 91       	pop	r29
   603ae:	cf 91       	pop	r28
   603b0:	1f 91       	pop	r17
   603b2:	0f 91       	pop	r16
   603b4:	ff 90       	pop	r15
   603b6:	ef 90       	pop	r14
   603b8:	08 95       	ret

000603ba <_nrf24l01p_flush_rx>:
   603ba:	80 e0       	ldi	r24, 0x00	; 0
   603bc:	1f 94 48 01 	call	0x60290	; 0x60290 <_nrf24l01p_csn_pin>
   603c0:	82 ee       	ldi	r24, 0xE2	; 226
   603c2:	1f 94 21 01 	call	0x60242	; 0x60242 <arch_spi_master_transmit_byte_val>
   603c6:	81 e0       	ldi	r24, 0x01	; 1
   603c8:	1f 94 48 01 	call	0x60290	; 0x60290 <_nrf24l01p_csn_pin>
   603cc:	08 95       	ret

000603ce <_nrf24l01p_read_rx_payload_width>:
   603ce:	cf 93       	push	r28
   603d0:	80 e0       	ldi	r24, 0x00	; 0
   603d2:	1f 94 48 01 	call	0x60290	; 0x60290 <_nrf24l01p_csn_pin>
   603d6:	80 e6       	ldi	r24, 0x60	; 96
   603d8:	1f 94 21 01 	call	0x60242	; 0x60242 <arch_spi_master_transmit_byte_val>
   603dc:	8f ef       	ldi	r24, 0xFF	; 255
   603de:	1f 94 21 01 	call	0x60242	; 0x60242 <arch_spi_master_transmit_byte_val>
   603e2:	c8 2f       	mov	r28, r24
   603e4:	81 e0       	ldi	r24, 0x01	; 1
   603e6:	1f 94 48 01 	call	0x60290	; 0x60290 <_nrf24l01p_csn_pin>
   603ea:	8c 2f       	mov	r24, r28
   603ec:	90 e0       	ldi	r25, 0x00	; 0
   603ee:	cf 91       	pop	r28
   603f0:	08 95       	ret

000603f2 <_nrf24l01p_power_up>:
   603f2:	cf 93       	push	r28
   603f4:	df 93       	push	r29
   603f6:	1f 92       	push	r1
   603f8:	cd b7       	in	r28, 0x3d	; 61
   603fa:	de b7       	in	r29, 0x3e	; 62
   603fc:	41 e0       	ldi	r20, 0x01	; 1
   603fe:	50 e0       	ldi	r21, 0x00	; 0
   60400:	be 01       	movw	r22, r28
   60402:	6f 5f       	subi	r22, 0xFF	; 255
   60404:	7f 4f       	sbci	r23, 0xFF	; 255
   60406:	80 e0       	ldi	r24, 0x00	; 0
   60408:	1f 94 59 01 	call	0x602b2	; 0x602b2 <_nrf24l01p_read_register>
   6040c:	89 81       	ldd	r24, Y+1	; 0x01
   6040e:	82 60       	ori	r24, 0x02	; 2
   60410:	89 83       	std	Y+1, r24	; 0x01
   60412:	41 e0       	ldi	r20, 0x01	; 1
   60414:	50 e0       	ldi	r21, 0x00	; 0
   60416:	be 01       	movw	r22, r28
   60418:	6f 5f       	subi	r22, 0xFF	; 255
   6041a:	7f 4f       	sbci	r23, 0xFF	; 255
   6041c:	80 e0       	ldi	r24, 0x00	; 0
   6041e:	1f 94 88 01 	call	0x60310	; 0x60310 <_nrf24l01p_write_register>
   60422:	8f e9       	ldi	r24, 0x9F	; 159
   60424:	9c e8       	ldi	r25, 0x8C	; 140
   60426:	01 97       	sbiw	r24, 0x01	; 1
   60428:	f1 f7       	brne	.-4      	; 0x60426 <_nrf24l01p_power_up+0x34>
   6042a:	00 c0       	rjmp	.+0      	; 0x6042c <_nrf24l01p_power_up+0x3a>
   6042c:	00 00       	nop
   6042e:	82 e0       	ldi	r24, 0x02	; 2
   60430:	80 93 35 20 	sts	0x2035, r24	; 0x802035 <mode>
   60434:	0f 90       	pop	r0
   60436:	df 91       	pop	r29
   60438:	cf 91       	pop	r28
   6043a:	08 95       	ret

0006043c <_nrf24l01p_power_down>:
   6043c:	cf 93       	push	r28
   6043e:	df 93       	push	r29
   60440:	1f 92       	push	r1
   60442:	cd b7       	in	r28, 0x3d	; 61
   60444:	de b7       	in	r29, 0x3e	; 62
   60446:	41 e0       	ldi	r20, 0x01	; 1
   60448:	50 e0       	ldi	r21, 0x00	; 0
   6044a:	be 01       	movw	r22, r28
   6044c:	6f 5f       	subi	r22, 0xFF	; 255
   6044e:	7f 4f       	sbci	r23, 0xFF	; 255
   60450:	80 e0       	ldi	r24, 0x00	; 0
   60452:	1f 94 59 01 	call	0x602b2	; 0x602b2 <_nrf24l01p_read_register>
   60456:	89 81       	ldd	r24, Y+1	; 0x01
   60458:	8d 7f       	andi	r24, 0xFD	; 253
   6045a:	89 83       	std	Y+1, r24	; 0x01
   6045c:	41 e0       	ldi	r20, 0x01	; 1
   6045e:	50 e0       	ldi	r21, 0x00	; 0
   60460:	be 01       	movw	r22, r28
   60462:	6f 5f       	subi	r22, 0xFF	; 255
   60464:	7f 4f       	sbci	r23, 0xFF	; 255
   60466:	80 e0       	ldi	r24, 0x00	; 0
   60468:	1f 94 88 01 	call	0x60310	; 0x60310 <_nrf24l01p_write_register>
   6046c:	81 e0       	ldi	r24, 0x01	; 1
   6046e:	80 93 35 20 	sts	0x2035, r24	; 0x802035 <mode>
   60472:	0f 90       	pop	r0
   60474:	df 91       	pop	r29
   60476:	cf 91       	pop	r28
   60478:	08 95       	ret

0006047a <_nrf24l01p_rx_mode>:
   6047a:	cf 93       	push	r28
   6047c:	df 93       	push	r29
   6047e:	1f 92       	push	r1
   60480:	cd b7       	in	r28, 0x3d	; 61
   60482:	de b7       	in	r29, 0x3e	; 62
   60484:	41 e0       	ldi	r20, 0x01	; 1
   60486:	50 e0       	ldi	r21, 0x00	; 0
   60488:	be 01       	movw	r22, r28
   6048a:	6f 5f       	subi	r22, 0xFF	; 255
   6048c:	7f 4f       	sbci	r23, 0xFF	; 255
   6048e:	80 e0       	ldi	r24, 0x00	; 0
   60490:	1f 94 59 01 	call	0x602b2	; 0x602b2 <_nrf24l01p_read_register>
   60494:	89 81       	ldd	r24, Y+1	; 0x01
   60496:	81 60       	ori	r24, 0x01	; 1
   60498:	89 83       	std	Y+1, r24	; 0x01
   6049a:	41 e0       	ldi	r20, 0x01	; 1
   6049c:	50 e0       	ldi	r21, 0x00	; 0
   6049e:	be 01       	movw	r22, r28
   604a0:	6f 5f       	subi	r22, 0xFF	; 255
   604a2:	7f 4f       	sbci	r23, 0xFF	; 255
   604a4:	80 e0       	ldi	r24, 0x00	; 0
   604a6:	1f 94 88 01 	call	0x60310	; 0x60310 <_nrf24l01p_write_register>
   604aa:	83 e0       	ldi	r24, 0x03	; 3
   604ac:	80 93 35 20 	sts	0x2035, r24	; 0x802035 <mode>
   604b0:	0f 90       	pop	r0
   604b2:	df 91       	pop	r29
   604b4:	cf 91       	pop	r28
   604b6:	08 95       	ret

000604b8 <_nrf24l01p_enable_auto_ack>:
   604b8:	1f 93       	push	r17
   604ba:	cf 93       	push	r28
   604bc:	df 93       	push	r29
   604be:	1f 92       	push	r1
   604c0:	cd b7       	in	r28, 0x3d	; 61
   604c2:	de b7       	in	r29, 0x3e	; 62
   604c4:	18 2f       	mov	r17, r24
   604c6:	41 e0       	ldi	r20, 0x01	; 1
   604c8:	50 e0       	ldi	r21, 0x00	; 0
   604ca:	be 01       	movw	r22, r28
   604cc:	6f 5f       	subi	r22, 0xFF	; 255
   604ce:	7f 4f       	sbci	r23, 0xFF	; 255
   604d0:	81 e0       	ldi	r24, 0x01	; 1
   604d2:	1f 94 59 01 	call	0x602b2	; 0x602b2 <_nrf24l01p_read_register>
   604d6:	21 e0       	ldi	r18, 0x01	; 1
   604d8:	30 e0       	ldi	r19, 0x00	; 0
   604da:	c9 01       	movw	r24, r18
   604dc:	02 c0       	rjmp	.+4      	; 0x604e2 <_nrf24l01p_enable_auto_ack+0x2a>
   604de:	88 0f       	add	r24, r24
   604e0:	99 1f       	adc	r25, r25
   604e2:	1a 95       	dec	r17
   604e4:	e2 f7       	brpl	.-8      	; 0x604de <_nrf24l01p_enable_auto_ack+0x26>
   604e6:	99 81       	ldd	r25, Y+1	; 0x01
   604e8:	89 2b       	or	r24, r25
   604ea:	89 83       	std	Y+1, r24	; 0x01
   604ec:	41 e0       	ldi	r20, 0x01	; 1
   604ee:	50 e0       	ldi	r21, 0x00	; 0
   604f0:	be 01       	movw	r22, r28
   604f2:	6f 5f       	subi	r22, 0xFF	; 255
   604f4:	7f 4f       	sbci	r23, 0xFF	; 255
   604f6:	81 e0       	ldi	r24, 0x01	; 1
   604f8:	1f 94 88 01 	call	0x60310	; 0x60310 <_nrf24l01p_write_register>
   604fc:	0f 90       	pop	r0
   604fe:	df 91       	pop	r29
   60500:	cf 91       	pop	r28
   60502:	1f 91       	pop	r17
   60504:	08 95       	ret

00060506 <_nrf24l01p_disable_auto_ack_all_pipes>:
   60506:	cf 93       	push	r28
   60508:	df 93       	push	r29
   6050a:	1f 92       	push	r1
   6050c:	cd b7       	in	r28, 0x3d	; 61
   6050e:	de b7       	in	r29, 0x3e	; 62
   60510:	19 82       	std	Y+1, r1	; 0x01
   60512:	41 e0       	ldi	r20, 0x01	; 1
   60514:	50 e0       	ldi	r21, 0x00	; 0
   60516:	be 01       	movw	r22, r28
   60518:	6f 5f       	subi	r22, 0xFF	; 255
   6051a:	7f 4f       	sbci	r23, 0xFF	; 255
   6051c:	81 e0       	ldi	r24, 0x01	; 1
   6051e:	1f 94 88 01 	call	0x60310	; 0x60310 <_nrf24l01p_write_register>
   60522:	0f 90       	pop	r0
   60524:	df 91       	pop	r29
   60526:	cf 91       	pop	r28
   60528:	08 95       	ret

0006052a <_nrf24l01p_enable_rx_on_pipe>:
   6052a:	1f 93       	push	r17
   6052c:	cf 93       	push	r28
   6052e:	df 93       	push	r29
   60530:	1f 92       	push	r1
   60532:	cd b7       	in	r28, 0x3d	; 61
   60534:	de b7       	in	r29, 0x3e	; 62
   60536:	18 2f       	mov	r17, r24
   60538:	41 e0       	ldi	r20, 0x01	; 1
   6053a:	50 e0       	ldi	r21, 0x00	; 0
   6053c:	be 01       	movw	r22, r28
   6053e:	6f 5f       	subi	r22, 0xFF	; 255
   60540:	7f 4f       	sbci	r23, 0xFF	; 255
   60542:	82 e0       	ldi	r24, 0x02	; 2
   60544:	1f 94 59 01 	call	0x602b2	; 0x602b2 <_nrf24l01p_read_register>
   60548:	21 e0       	ldi	r18, 0x01	; 1
   6054a:	30 e0       	ldi	r19, 0x00	; 0
   6054c:	c9 01       	movw	r24, r18
   6054e:	02 c0       	rjmp	.+4      	; 0x60554 <_nrf24l01p_enable_rx_on_pipe+0x2a>
   60550:	88 0f       	add	r24, r24
   60552:	99 1f       	adc	r25, r25
   60554:	1a 95       	dec	r17
   60556:	e2 f7       	brpl	.-8      	; 0x60550 <_nrf24l01p_enable_rx_on_pipe+0x26>
   60558:	99 81       	ldd	r25, Y+1	; 0x01
   6055a:	89 2b       	or	r24, r25
   6055c:	89 83       	std	Y+1, r24	; 0x01
   6055e:	41 e0       	ldi	r20, 0x01	; 1
   60560:	50 e0       	ldi	r21, 0x00	; 0
   60562:	be 01       	movw	r22, r28
   60564:	6f 5f       	subi	r22, 0xFF	; 255
   60566:	7f 4f       	sbci	r23, 0xFF	; 255
   60568:	82 e0       	ldi	r24, 0x02	; 2
   6056a:	1f 94 88 01 	call	0x60310	; 0x60310 <_nrf24l01p_write_register>
   6056e:	0f 90       	pop	r0
   60570:	df 91       	pop	r29
   60572:	cf 91       	pop	r28
   60574:	1f 91       	pop	r17
   60576:	08 95       	ret

00060578 <_nrf24l01p_set_auto_retransmission_count>:
   60578:	1f 93       	push	r17
   6057a:	cf 93       	push	r28
   6057c:	df 93       	push	r29
   6057e:	1f 92       	push	r1
   60580:	cd b7       	in	r28, 0x3d	; 61
   60582:	de b7       	in	r29, 0x3e	; 62
   60584:	18 2f       	mov	r17, r24
   60586:	41 e0       	ldi	r20, 0x01	; 1
   60588:	50 e0       	ldi	r21, 0x00	; 0
   6058a:	be 01       	movw	r22, r28
   6058c:	6f 5f       	subi	r22, 0xFF	; 255
   6058e:	7f 4f       	sbci	r23, 0xFF	; 255
   60590:	84 e0       	ldi	r24, 0x04	; 4
   60592:	1f 94 59 01 	call	0x602b2	; 0x602b2 <_nrf24l01p_read_register>
   60596:	99 81       	ldd	r25, Y+1	; 0x01
   60598:	90 7f       	andi	r25, 0xF0	; 240
   6059a:	81 2f       	mov	r24, r17
   6059c:	89 2b       	or	r24, r25
   6059e:	89 83       	std	Y+1, r24	; 0x01
   605a0:	41 e0       	ldi	r20, 0x01	; 1
   605a2:	50 e0       	ldi	r21, 0x00	; 0
   605a4:	be 01       	movw	r22, r28
   605a6:	6f 5f       	subi	r22, 0xFF	; 255
   605a8:	7f 4f       	sbci	r23, 0xFF	; 255
   605aa:	84 e0       	ldi	r24, 0x04	; 4
   605ac:	1f 94 88 01 	call	0x60310	; 0x60310 <_nrf24l01p_write_register>
   605b0:	0f 90       	pop	r0
   605b2:	df 91       	pop	r29
   605b4:	cf 91       	pop	r28
   605b6:	1f 91       	pop	r17
   605b8:	08 95       	ret

000605ba <_nrf24l01p_set_auto_retransmission_delay>:
   605ba:	1f 93       	push	r17
   605bc:	cf 93       	push	r28
   605be:	df 93       	push	r29
   605c0:	1f 92       	push	r1
   605c2:	cd b7       	in	r28, 0x3d	; 61
   605c4:	de b7       	in	r29, 0x3e	; 62
   605c6:	18 2f       	mov	r17, r24
   605c8:	41 e0       	ldi	r20, 0x01	; 1
   605ca:	50 e0       	ldi	r21, 0x00	; 0
   605cc:	be 01       	movw	r22, r28
   605ce:	6f 5f       	subi	r22, 0xFF	; 255
   605d0:	7f 4f       	sbci	r23, 0xFF	; 255
   605d2:	84 e0       	ldi	r24, 0x04	; 4
   605d4:	1f 94 59 01 	call	0x602b2	; 0x602b2 <_nrf24l01p_read_register>
   605d8:	20 e1       	ldi	r18, 0x10	; 16
   605da:	12 9f       	mul	r17, r18
   605dc:	c0 01       	movw	r24, r0
   605de:	11 24       	eor	r1, r1
   605e0:	99 81       	ldd	r25, Y+1	; 0x01
   605e2:	9f 70       	andi	r25, 0x0F	; 15
   605e4:	89 2b       	or	r24, r25
   605e6:	89 83       	std	Y+1, r24	; 0x01
   605e8:	41 e0       	ldi	r20, 0x01	; 1
   605ea:	50 e0       	ldi	r21, 0x00	; 0
   605ec:	be 01       	movw	r22, r28
   605ee:	6f 5f       	subi	r22, 0xFF	; 255
   605f0:	7f 4f       	sbci	r23, 0xFF	; 255
   605f2:	84 e0       	ldi	r24, 0x04	; 4
   605f4:	1f 94 88 01 	call	0x60310	; 0x60310 <_nrf24l01p_write_register>
   605f8:	0f 90       	pop	r0
   605fa:	df 91       	pop	r29
   605fc:	cf 91       	pop	r28
   605fe:	1f 91       	pop	r17
   60600:	08 95       	ret

00060602 <_nrf24l01p_set_DataRate>:
   60602:	1f 93       	push	r17
   60604:	cf 93       	push	r28
   60606:	df 93       	push	r29
   60608:	1f 92       	push	r1
   6060a:	cd b7       	in	r28, 0x3d	; 61
   6060c:	de b7       	in	r29, 0x3e	; 62
   6060e:	18 2f       	mov	r17, r24
   60610:	41 e0       	ldi	r20, 0x01	; 1
   60612:	50 e0       	ldi	r21, 0x00	; 0
   60614:	be 01       	movw	r22, r28
   60616:	6f 5f       	subi	r22, 0xFF	; 255
   60618:	7f 4f       	sbci	r23, 0xFF	; 255
   6061a:	86 e0       	ldi	r24, 0x06	; 6
   6061c:	1f 94 59 01 	call	0x602b2	; 0x602b2 <_nrf24l01p_read_register>
   60620:	99 81       	ldd	r25, Y+1	; 0x01
   60622:	97 7d       	andi	r25, 0xD7	; 215
   60624:	81 2f       	mov	r24, r17
   60626:	89 2b       	or	r24, r25
   60628:	89 83       	std	Y+1, r24	; 0x01
   6062a:	41 e0       	ldi	r20, 0x01	; 1
   6062c:	50 e0       	ldi	r21, 0x00	; 0
   6062e:	be 01       	movw	r22, r28
   60630:	6f 5f       	subi	r22, 0xFF	; 255
   60632:	7f 4f       	sbci	r23, 0xFF	; 255
   60634:	86 e0       	ldi	r24, 0x06	; 6
   60636:	1f 94 88 01 	call	0x60310	; 0x60310 <_nrf24l01p_write_register>
   6063a:	0f 90       	pop	r0
   6063c:	df 91       	pop	r29
   6063e:	cf 91       	pop	r28
   60640:	1f 91       	pop	r17
   60642:	08 95       	ret

00060644 <_nrf24l01p_set_RX_pipe_address>:
   60644:	2f 92       	push	r2
   60646:	3f 92       	push	r3
   60648:	4f 92       	push	r4
   6064a:	5f 92       	push	r5
   6064c:	6f 92       	push	r6
   6064e:	7f 92       	push	r7
   60650:	8f 92       	push	r8
   60652:	9f 92       	push	r9
   60654:	af 92       	push	r10
   60656:	bf 92       	push	r11
   60658:	cf 92       	push	r12
   6065a:	df 92       	push	r13
   6065c:	ef 92       	push	r14
   6065e:	ff 92       	push	r15
   60660:	0f 93       	push	r16
   60662:	1f 93       	push	r17
   60664:	cf 93       	push	r28
   60666:	df 93       	push	r29
   60668:	cd b7       	in	r28, 0x3d	; 61
   6066a:	de b7       	in	r29, 0x3e	; 62
   6066c:	25 97       	sbiw	r28, 0x05	; 5
   6066e:	cd bf       	out	0x3d, r28	; 61
   60670:	de bf       	out	0x3e, r29	; 62
   60672:	48 2e       	mov	r4, r24
   60674:	b0 2e       	mov	r11, r16
   60676:	a2 2e       	mov	r10, r18
   60678:	93 2e       	mov	r9, r19
   6067a:	84 2e       	mov	r8, r20
   6067c:	75 2e       	mov	r7, r21
   6067e:	66 2e       	mov	r6, r22
   60680:	57 2e       	mov	r5, r23
   60682:	81 e0       	ldi	r24, 0x01	; 1
   60684:	84 15       	cp	r24, r4
   60686:	68 f4       	brcc	.+26     	; 0x606a2 <_nrf24l01p_set_RX_pipe_address+0x5e>
   60688:	21 e0       	ldi	r18, 0x01	; 1
   6068a:	90 e0       	ldi	r25, 0x00	; 0
   6068c:	8e ef       	ldi	r24, 0xFE	; 254
   6068e:	84 0d       	add	r24, r4
   60690:	84 30       	cpi	r24, 0x04	; 4
   60692:	08 f0       	brcs	.+2      	; 0x60696 <_nrf24l01p_set_RX_pipe_address+0x52>
   60694:	20 e0       	ldi	r18, 0x00	; 0
   60696:	c2 2e       	mov	r12, r18
   60698:	d9 2e       	mov	r13, r25
   6069a:	1c 14       	cp	r1, r12
   6069c:	1d 04       	cpc	r1, r13
   6069e:	34 f0       	brlt	.+12     	; 0x606ac <_nrf24l01p_set_RX_pipe_address+0x68>
   606a0:	21 c0       	rjmp	.+66     	; 0x606e4 <_nrf24l01p_set_RX_pipe_address+0xa0>
   606a2:	0f 2e       	mov	r0, r31
   606a4:	f5 e0       	ldi	r31, 0x05	; 5
   606a6:	cf 2e       	mov	r12, r31
   606a8:	d1 2c       	mov	r13, r1
   606aa:	f0 2d       	mov	r31, r0
   606ac:	de 01       	movw	r26, r28
   606ae:	11 96       	adiw	r26, 0x01	; 1
   606b0:	7d 01       	movw	r14, r26
   606b2:	21 2c       	mov	r2, r1
   606b4:	31 2c       	mov	r3, r1
   606b6:	e0 e0       	ldi	r30, 0x00	; 0
   606b8:	f0 e0       	ldi	r31, 0x00	; 0
   606ba:	2b 2d       	mov	r18, r11
   606bc:	31 2f       	mov	r19, r17
   606be:	4a 2d       	mov	r20, r10
   606c0:	59 2d       	mov	r21, r9
   606c2:	68 2d       	mov	r22, r8
   606c4:	77 2d       	mov	r23, r7
   606c6:	86 2d       	mov	r24, r6
   606c8:	95 2d       	mov	r25, r5
   606ca:	02 2d       	mov	r16, r2
   606cc:	1f 94 60 07 	call	0x60ec0	; 0x60ec0 <__lshrdi3>
   606d0:	d7 01       	movw	r26, r14
   606d2:	2d 93       	st	X+, r18
   606d4:	7d 01       	movw	r14, r26
   606d6:	31 96       	adiw	r30, 0x01	; 1
   606d8:	b8 e0       	ldi	r27, 0x08	; 8
   606da:	2b 0e       	add	r2, r27
   606dc:	31 1c       	adc	r3, r1
   606de:	ec 15       	cp	r30, r12
   606e0:	fd 05       	cpc	r31, r13
   606e2:	5c f3       	brlt	.-42     	; 0x606ba <_nrf24l01p_set_RX_pipe_address+0x76>
   606e4:	a6 01       	movw	r20, r12
   606e6:	be 01       	movw	r22, r28
   606e8:	6f 5f       	subi	r22, 0xFF	; 255
   606ea:	7f 4f       	sbci	r23, 0xFF	; 255
   606ec:	8a e0       	ldi	r24, 0x0A	; 10
   606ee:	84 0d       	add	r24, r4
   606f0:	1f 94 88 01 	call	0x60310	; 0x60310 <_nrf24l01p_write_register>
   606f4:	25 96       	adiw	r28, 0x05	; 5
   606f6:	cd bf       	out	0x3d, r28	; 61
   606f8:	de bf       	out	0x3e, r29	; 62
   606fa:	df 91       	pop	r29
   606fc:	cf 91       	pop	r28
   606fe:	1f 91       	pop	r17
   60700:	0f 91       	pop	r16
   60702:	ff 90       	pop	r15
   60704:	ef 90       	pop	r14
   60706:	df 90       	pop	r13
   60708:	cf 90       	pop	r12
   6070a:	bf 90       	pop	r11
   6070c:	af 90       	pop	r10
   6070e:	9f 90       	pop	r9
   60710:	8f 90       	pop	r8
   60712:	7f 90       	pop	r7
   60714:	6f 90       	pop	r6
   60716:	5f 90       	pop	r5
   60718:	4f 90       	pop	r4
   6071a:	3f 90       	pop	r3
   6071c:	2f 90       	pop	r2
   6071e:	08 95       	ret

00060720 <_nrf24l01p_get_fifo_flag_rx_empty>:
   60720:	cf 93       	push	r28
   60722:	df 93       	push	r29
   60724:	1f 92       	push	r1
   60726:	cd b7       	in	r28, 0x3d	; 61
   60728:	de b7       	in	r29, 0x3e	; 62
   6072a:	41 e0       	ldi	r20, 0x01	; 1
   6072c:	50 e0       	ldi	r21, 0x00	; 0
   6072e:	be 01       	movw	r22, r28
   60730:	6f 5f       	subi	r22, 0xFF	; 255
   60732:	7f 4f       	sbci	r23, 0xFF	; 255
   60734:	87 e1       	ldi	r24, 0x17	; 23
   60736:	1f 94 59 01 	call	0x602b2	; 0x602b2 <_nrf24l01p_read_register>
   6073a:	89 81       	ldd	r24, Y+1	; 0x01
   6073c:	81 70       	andi	r24, 0x01	; 1
   6073e:	0f 90       	pop	r0
   60740:	df 91       	pop	r29
   60742:	cf 91       	pop	r28
   60744:	08 95       	ret

00060746 <_nrf24l01p_enable_dynamic_payload_pipe>:
   60746:	1f 93       	push	r17
   60748:	cf 93       	push	r28
   6074a:	df 93       	push	r29
   6074c:	1f 92       	push	r1
   6074e:	cd b7       	in	r28, 0x3d	; 61
   60750:	de b7       	in	r29, 0x3e	; 62
   60752:	18 2f       	mov	r17, r24
   60754:	41 e0       	ldi	r20, 0x01	; 1
   60756:	50 e0       	ldi	r21, 0x00	; 0
   60758:	be 01       	movw	r22, r28
   6075a:	6f 5f       	subi	r22, 0xFF	; 255
   6075c:	7f 4f       	sbci	r23, 0xFF	; 255
   6075e:	8c e1       	ldi	r24, 0x1C	; 28
   60760:	1f 94 59 01 	call	0x602b2	; 0x602b2 <_nrf24l01p_read_register>
   60764:	21 e0       	ldi	r18, 0x01	; 1
   60766:	30 e0       	ldi	r19, 0x00	; 0
   60768:	c9 01       	movw	r24, r18
   6076a:	02 c0       	rjmp	.+4      	; 0x60770 <_nrf24l01p_enable_dynamic_payload_pipe+0x2a>
   6076c:	88 0f       	add	r24, r24
   6076e:	99 1f       	adc	r25, r25
   60770:	1a 95       	dec	r17
   60772:	e2 f7       	brpl	.-8      	; 0x6076c <_nrf24l01p_enable_dynamic_payload_pipe+0x26>
   60774:	99 81       	ldd	r25, Y+1	; 0x01
   60776:	89 2b       	or	r24, r25
   60778:	89 83       	std	Y+1, r24	; 0x01
   6077a:	41 e0       	ldi	r20, 0x01	; 1
   6077c:	50 e0       	ldi	r21, 0x00	; 0
   6077e:	be 01       	movw	r22, r28
   60780:	6f 5f       	subi	r22, 0xFF	; 255
   60782:	7f 4f       	sbci	r23, 0xFF	; 255
   60784:	8c e1       	ldi	r24, 0x1C	; 28
   60786:	1f 94 88 01 	call	0x60310	; 0x60310 <_nrf24l01p_write_register>
   6078a:	0f 90       	pop	r0
   6078c:	df 91       	pop	r29
   6078e:	cf 91       	pop	r28
   60790:	1f 91       	pop	r17
   60792:	08 95       	ret

00060794 <_nrf24l01p_disable_dynamic_payload_all_pipe>:
   60794:	cf 93       	push	r28
   60796:	df 93       	push	r29
   60798:	1f 92       	push	r1
   6079a:	cd b7       	in	r28, 0x3d	; 61
   6079c:	de b7       	in	r29, 0x3e	; 62
   6079e:	19 82       	std	Y+1, r1	; 0x01
   607a0:	41 e0       	ldi	r20, 0x01	; 1
   607a2:	50 e0       	ldi	r21, 0x00	; 0
   607a4:	be 01       	movw	r22, r28
   607a6:	6f 5f       	subi	r22, 0xFF	; 255
   607a8:	7f 4f       	sbci	r23, 0xFF	; 255
   607aa:	8c e1       	ldi	r24, 0x1C	; 28
   607ac:	1f 94 88 01 	call	0x60310	; 0x60310 <_nrf24l01p_write_register>
   607b0:	0f 90       	pop	r0
   607b2:	df 91       	pop	r29
   607b4:	cf 91       	pop	r28
   607b6:	08 95       	ret

000607b8 <_nrf24l01p_enable_dynamic_payload>:
   607b8:	cf 93       	push	r28
   607ba:	df 93       	push	r29
   607bc:	1f 92       	push	r1
   607be:	cd b7       	in	r28, 0x3d	; 61
   607c0:	de b7       	in	r29, 0x3e	; 62
   607c2:	41 e0       	ldi	r20, 0x01	; 1
   607c4:	50 e0       	ldi	r21, 0x00	; 0
   607c6:	be 01       	movw	r22, r28
   607c8:	6f 5f       	subi	r22, 0xFF	; 255
   607ca:	7f 4f       	sbci	r23, 0xFF	; 255
   607cc:	8d e1       	ldi	r24, 0x1D	; 29
   607ce:	1f 94 59 01 	call	0x602b2	; 0x602b2 <_nrf24l01p_read_register>
   607d2:	89 81       	ldd	r24, Y+1	; 0x01
   607d4:	84 60       	ori	r24, 0x04	; 4
   607d6:	89 83       	std	Y+1, r24	; 0x01
   607d8:	41 e0       	ldi	r20, 0x01	; 1
   607da:	50 e0       	ldi	r21, 0x00	; 0
   607dc:	be 01       	movw	r22, r28
   607de:	6f 5f       	subi	r22, 0xFF	; 255
   607e0:	7f 4f       	sbci	r23, 0xFF	; 255
   607e2:	8d e1       	ldi	r24, 0x1D	; 29
   607e4:	1f 94 88 01 	call	0x60310	; 0x60310 <_nrf24l01p_write_register>
   607e8:	0f 90       	pop	r0
   607ea:	df 91       	pop	r29
   607ec:	cf 91       	pop	r28
   607ee:	08 95       	ret

000607f0 <_nrf24l01p_enable_payload_with_ack>:
   607f0:	cf 93       	push	r28
   607f2:	df 93       	push	r29
   607f4:	1f 92       	push	r1
   607f6:	cd b7       	in	r28, 0x3d	; 61
   607f8:	de b7       	in	r29, 0x3e	; 62
   607fa:	41 e0       	ldi	r20, 0x01	; 1
   607fc:	50 e0       	ldi	r21, 0x00	; 0
   607fe:	be 01       	movw	r22, r28
   60800:	6f 5f       	subi	r22, 0xFF	; 255
   60802:	7f 4f       	sbci	r23, 0xFF	; 255
   60804:	8d e1       	ldi	r24, 0x1D	; 29
   60806:	1f 94 59 01 	call	0x602b2	; 0x602b2 <_nrf24l01p_read_register>
   6080a:	89 81       	ldd	r24, Y+1	; 0x01
   6080c:	82 60       	ori	r24, 0x02	; 2
   6080e:	89 83       	std	Y+1, r24	; 0x01
   60810:	41 e0       	ldi	r20, 0x01	; 1
   60812:	50 e0       	ldi	r21, 0x00	; 0
   60814:	be 01       	movw	r22, r28
   60816:	6f 5f       	subi	r22, 0xFF	; 255
   60818:	7f 4f       	sbci	r23, 0xFF	; 255
   6081a:	8d e1       	ldi	r24, 0x1D	; 29
   6081c:	1f 94 88 01 	call	0x60310	; 0x60310 <_nrf24l01p_write_register>
   60820:	0f 90       	pop	r0
   60822:	df 91       	pop	r29
   60824:	cf 91       	pop	r28
   60826:	08 95       	ret

00060828 <_nrf24l01p_startup>:
   60828:	cf 93       	push	r28
   6082a:	df 93       	push	r29
   6082c:	1f 92       	push	r1
   6082e:	cd b7       	in	r28, 0x3d	; 61
   60830:	de b7       	in	r29, 0x3e	; 62
   60832:	87 e0       	ldi	r24, 0x07	; 7
   60834:	89 83       	std	Y+1, r24	; 0x01
   60836:	41 e0       	ldi	r20, 0x01	; 1
   60838:	50 e0       	ldi	r21, 0x00	; 0
   6083a:	be 01       	movw	r22, r28
   6083c:	6f 5f       	subi	r22, 0xFF	; 255
   6083e:	7f 4f       	sbci	r23, 0xFF	; 255
   60840:	86 e0       	ldi	r24, 0x06	; 6
   60842:	1f 94 88 01 	call	0x60310	; 0x60310 <_nrf24l01p_write_register>
   60846:	19 82       	std	Y+1, r1	; 0x01
   60848:	41 e0       	ldi	r20, 0x01	; 1
   6084a:	50 e0       	ldi	r21, 0x00	; 0
   6084c:	be 01       	movw	r22, r28
   6084e:	6f 5f       	subi	r22, 0xFF	; 255
   60850:	7f 4f       	sbci	r23, 0xFF	; 255
   60852:	81 e0       	ldi	r24, 0x01	; 1
   60854:	1f 94 88 01 	call	0x60310	; 0x60310 <_nrf24l01p_write_register>
   60858:	81 e0       	ldi	r24, 0x01	; 1
   6085a:	89 83       	std	Y+1, r24	; 0x01
   6085c:	41 e0       	ldi	r20, 0x01	; 1
   6085e:	50 e0       	ldi	r21, 0x00	; 0
   60860:	be 01       	movw	r22, r28
   60862:	6f 5f       	subi	r22, 0xFF	; 255
   60864:	7f 4f       	sbci	r23, 0xFF	; 255
   60866:	86 e0       	ldi	r24, 0x06	; 6
   60868:	1f 94 88 01 	call	0x60310	; 0x60310 <_nrf24l01p_write_register>
   6086c:	1f 94 f9 01 	call	0x603f2	; 0x603f2 <_nrf24l01p_power_up>
   60870:	8f e9       	ldi	r24, 0x9F	; 159
   60872:	9c e8       	ldi	r25, 0x8C	; 140
   60874:	01 97       	sbiw	r24, 0x01	; 1
   60876:	f1 f7       	brne	.-4      	; 0x60874 <_nrf24l01p_startup+0x4c>
   60878:	00 c0       	rjmp	.+0      	; 0x6087a <_nrf24l01p_startup+0x52>
   6087a:	00 00       	nop
   6087c:	1f 94 3d 02 	call	0x6047a	; 0x6047a <_nrf24l01p_rx_mode>
   60880:	81 e0       	ldi	r24, 0x01	; 1
   60882:	1f 94 37 01 	call	0x6026e	; 0x6026e <_nrf24l01p_ce_pin>
   60886:	0f 90       	pop	r0
   60888:	df 91       	pop	r29
   6088a:	cf 91       	pop	r28
   6088c:	08 95       	ret

0006088e <_nrf24l01p_init>:
   6088e:	cf 93       	push	r28
   60890:	df 93       	push	r29
   60892:	1f 92       	push	r1
   60894:	1f 92       	push	r1
   60896:	cd b7       	in	r28, 0x3d	; 61
   60898:	de b7       	in	r29, 0x3e	; 62
   6089a:	e0 e4       	ldi	r30, 0x40	; 64
   6089c:	f6 e0       	ldi	r31, 0x06	; 6
   6089e:	80 eb       	ldi	r24, 0xB0	; 176
   608a0:	81 83       	std	Z+1, r24	; 0x01
   608a2:	80 e4       	ldi	r24, 0x40	; 64
   608a4:	82 83       	std	Z+2, r24	; 0x02
   608a6:	80 e5       	ldi	r24, 0x50	; 80
   608a8:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
   608ac:	80 e1       	ldi	r24, 0x10	; 16
   608ae:	81 83       	std	Z+1, r24	; 0x01
   608b0:	80 e8       	ldi	r24, 0x80	; 128
   608b2:	80 93 21 06 	sts	0x0621, r24	; 0x800621 <__TEXT_REGION_LENGTH__+0x700621>
   608b6:	80 e0       	ldi	r24, 0x00	; 0
   608b8:	1f 94 37 01 	call	0x6026e	; 0x6026e <_nrf24l01p_ce_pin>
   608bc:	81 e0       	ldi	r24, 0x01	; 1
   608be:	1f 94 48 01 	call	0x60290	; 0x60290 <_nrf24l01p_csn_pin>
   608c2:	1f 94 dd 01 	call	0x603ba	; 0x603ba <_nrf24l01p_flush_rx>
   608c6:	1f 94 1e 02 	call	0x6043c	; 0x6043c <_nrf24l01p_power_down>
   608ca:	8e e0       	ldi	r24, 0x0E	; 14
   608cc:	89 83       	std	Y+1, r24	; 0x01
   608ce:	41 e0       	ldi	r20, 0x01	; 1
   608d0:	50 e0       	ldi	r21, 0x00	; 0
   608d2:	be 01       	movw	r22, r28
   608d4:	6f 5f       	subi	r22, 0xFF	; 255
   608d6:	7f 4f       	sbci	r23, 0xFF	; 255
   608d8:	87 e0       	ldi	r24, 0x07	; 7
   608da:	1f 94 88 01 	call	0x60310	; 0x60310 <_nrf24l01p_write_register>
   608de:	8b e0       	ldi	r24, 0x0B	; 11
   608e0:	8a 83       	std	Y+2, r24	; 0x02
   608e2:	41 e0       	ldi	r20, 0x01	; 1
   608e4:	50 e0       	ldi	r21, 0x00	; 0
   608e6:	be 01       	movw	r22, r28
   608e8:	6e 5f       	subi	r22, 0xFE	; 254
   608ea:	7f 4f       	sbci	r23, 0xFF	; 255
   608ec:	80 e0       	ldi	r24, 0x00	; 0
   608ee:	1f 94 88 01 	call	0x60310	; 0x60310 <_nrf24l01p_write_register>
   608f2:	1f 94 83 02 	call	0x60506	; 0x60506 <_nrf24l01p_disable_auto_ack_all_pipes>
   608f6:	1f 94 ca 03 	call	0x60794	; 0x60794 <_nrf24l01p_disable_dynamic_payload_all_pipe>
   608fa:	1f 94 14 04 	call	0x60828	; 0x60828 <_nrf24l01p_startup>
   608fe:	1f 94 dc 03 	call	0x607b8	; 0x607b8 <_nrf24l01p_enable_dynamic_payload>
   60902:	1f 94 f8 03 	call	0x607f0	; 0x607f0 <_nrf24l01p_enable_payload_with_ack>
   60906:	80 e0       	ldi	r24, 0x00	; 0
   60908:	1f 94 5c 02 	call	0x604b8	; 0x604b8 <_nrf24l01p_enable_auto_ack>
   6090c:	81 e0       	ldi	r24, 0x01	; 1
   6090e:	1f 94 5c 02 	call	0x604b8	; 0x604b8 <_nrf24l01p_enable_auto_ack>
   60912:	82 e0       	ldi	r24, 0x02	; 2
   60914:	1f 94 5c 02 	call	0x604b8	; 0x604b8 <_nrf24l01p_enable_auto_ack>
   60918:	83 e0       	ldi	r24, 0x03	; 3
   6091a:	1f 94 5c 02 	call	0x604b8	; 0x604b8 <_nrf24l01p_enable_auto_ack>
   6091e:	84 e0       	ldi	r24, 0x04	; 4
   60920:	1f 94 5c 02 	call	0x604b8	; 0x604b8 <_nrf24l01p_enable_auto_ack>
   60924:	85 e0       	ldi	r24, 0x05	; 5
   60926:	1f 94 5c 02 	call	0x604b8	; 0x604b8 <_nrf24l01p_enable_auto_ack>
   6092a:	80 e0       	ldi	r24, 0x00	; 0
   6092c:	1f 94 a3 03 	call	0x60746	; 0x60746 <_nrf24l01p_enable_dynamic_payload_pipe>
   60930:	81 e0       	ldi	r24, 0x01	; 1
   60932:	1f 94 a3 03 	call	0x60746	; 0x60746 <_nrf24l01p_enable_dynamic_payload_pipe>
   60936:	82 e0       	ldi	r24, 0x02	; 2
   60938:	1f 94 a3 03 	call	0x60746	; 0x60746 <_nrf24l01p_enable_dynamic_payload_pipe>
   6093c:	83 e0       	ldi	r24, 0x03	; 3
   6093e:	1f 94 a3 03 	call	0x60746	; 0x60746 <_nrf24l01p_enable_dynamic_payload_pipe>
   60942:	84 e0       	ldi	r24, 0x04	; 4
   60944:	1f 94 a3 03 	call	0x60746	; 0x60746 <_nrf24l01p_enable_dynamic_payload_pipe>
   60948:	85 e0       	ldi	r24, 0x05	; 5
   6094a:	1f 94 a3 03 	call	0x60746	; 0x60746 <_nrf24l01p_enable_dynamic_payload_pipe>
   6094e:	80 e0       	ldi	r24, 0x00	; 0
   60950:	1f 94 95 02 	call	0x6052a	; 0x6052a <_nrf24l01p_enable_rx_on_pipe>
   60954:	81 e0       	ldi	r24, 0x01	; 1
   60956:	1f 94 95 02 	call	0x6052a	; 0x6052a <_nrf24l01p_enable_rx_on_pipe>
   6095a:	82 e0       	ldi	r24, 0x02	; 2
   6095c:	1f 94 95 02 	call	0x6052a	; 0x6052a <_nrf24l01p_enable_rx_on_pipe>
   60960:	83 e0       	ldi	r24, 0x03	; 3
   60962:	1f 94 95 02 	call	0x6052a	; 0x6052a <_nrf24l01p_enable_rx_on_pipe>
   60966:	84 e0       	ldi	r24, 0x04	; 4
   60968:	1f 94 95 02 	call	0x6052a	; 0x6052a <_nrf24l01p_enable_rx_on_pipe>
   6096c:	85 e0       	ldi	r24, 0x05	; 5
   6096e:	1f 94 95 02 	call	0x6052a	; 0x6052a <_nrf24l01p_enable_rx_on_pipe>
   60972:	8f e0       	ldi	r24, 0x0F	; 15
   60974:	1f 94 bc 02 	call	0x60578	; 0x60578 <_nrf24l01p_set_auto_retransmission_count>
   60978:	8f e0       	ldi	r24, 0x0F	; 15
   6097a:	1f 94 dd 02 	call	0x605ba	; 0x605ba <_nrf24l01p_set_auto_retransmission_delay>
   6097e:	80 e2       	ldi	r24, 0x20	; 32
   60980:	1f 94 01 03 	call	0x60602	; 0x60602 <_nrf24l01p_set_DataRate>
   60984:	1f 94 dd 01 	call	0x603ba	; 0x603ba <_nrf24l01p_flush_rx>
   60988:	0f 90       	pop	r0
   6098a:	0f 90       	pop	r0
   6098c:	df 91       	pop	r29
   6098e:	cf 91       	pop	r28
   60990:	08 95       	ret

00060992 <_nrf24l01p_reinit_loop>:
   60992:	01 c0       	rjmp	.+2      	; 0x60996 <_nrf24l01p_reinit_loop+0x4>
   60994:	00 00       	nop
   60996:	8f ef       	ldi	r24, 0xFF	; 255
   60998:	1f 94 21 01 	call	0x60242	; 0x60242 <arch_spi_master_transmit_byte_val>
   6099c:	88 23       	and	r24, r24
   6099e:	d1 f3       	breq	.-12     	; 0x60994 <_nrf24l01p_reinit_loop+0x2>
   609a0:	1f 94 47 04 	call	0x6088e	; 0x6088e <_nrf24l01p_init>
   609a4:	00 00       	nop
   609a6:	08 95       	ret

000609a8 <_nrf24l01p_get_status>:
   609a8:	cf 93       	push	r28
   609aa:	df 93       	push	r29
   609ac:	80 e0       	ldi	r24, 0x00	; 0
   609ae:	1f 94 48 01 	call	0x60290	; 0x60290 <_nrf24l01p_csn_pin>
   609b2:	8f ef       	ldi	r24, 0xFF	; 255
   609b4:	1f 94 21 01 	call	0x60242	; 0x60242 <arch_spi_master_transmit_byte_val>
   609b8:	c8 2f       	mov	r28, r24
   609ba:	d0 e0       	ldi	r29, 0x00	; 0
   609bc:	81 e0       	ldi	r24, 0x01	; 1
   609be:	1f 94 48 01 	call	0x60290	; 0x60290 <_nrf24l01p_csn_pin>
   609c2:	20 97       	sbiw	r28, 0x00	; 0
   609c4:	19 f4       	brne	.+6      	; 0x609cc <_nrf24l01p_get_status+0x24>
   609c6:	00 00       	nop
   609c8:	1f 94 c9 04 	call	0x60992	; 0x60992 <_nrf24l01p_reinit_loop>
   609cc:	ce 01       	movw	r24, r28
   609ce:	df 91       	pop	r29
   609d0:	cf 91       	pop	r28
   609d2:	08 95       	ret

000609d4 <_nrf24l01p_clear_data_ready_flag>:
   609d4:	cf 93       	push	r28
   609d6:	df 93       	push	r29
   609d8:	1f 92       	push	r1
   609da:	cd b7       	in	r28, 0x3d	; 61
   609dc:	de b7       	in	r29, 0x3e	; 62
   609de:	1f 94 d4 04 	call	0x609a8	; 0x609a8 <_nrf24l01p_get_status>
   609e2:	80 64       	ori	r24, 0x40	; 64
   609e4:	89 83       	std	Y+1, r24	; 0x01
   609e6:	41 e0       	ldi	r20, 0x01	; 1
   609e8:	50 e0       	ldi	r21, 0x00	; 0
   609ea:	be 01       	movw	r22, r28
   609ec:	6f 5f       	subi	r22, 0xFF	; 255
   609ee:	7f 4f       	sbci	r23, 0xFF	; 255
   609f0:	87 e0       	ldi	r24, 0x07	; 7
   609f2:	1f 94 88 01 	call	0x60310	; 0x60310 <_nrf24l01p_write_register>
   609f6:	0f 90       	pop	r0
   609f8:	df 91       	pop	r29
   609fa:	cf 91       	pop	r28
   609fc:	08 95       	ret

000609fe <_nrf24l01p_readable>:
   609fe:	cf 93       	push	r28
   60a00:	86 30       	cpi	r24, 0x06	; 6
   60a02:	90 f4       	brcc	.+36     	; 0x60a28 <_nrf24l01p_readable+0x2a>
   60a04:	c8 2f       	mov	r28, r24
   60a06:	1f 94 d4 04 	call	0x609a8	; 0x609a8 <_nrf24l01p_get_status>
   60a0a:	86 ff       	sbrs	r24, 6
   60a0c:	0f c0       	rjmp	.+30     	; 0x60a2c <_nrf24l01p_readable+0x2e>
   60a0e:	8e 70       	andi	r24, 0x0E	; 14
   60a10:	99 27       	eor	r25, r25
   60a12:	ac 01       	movw	r20, r24
   60a14:	55 95       	asr	r21
   60a16:	47 95       	ror	r20
   60a18:	2c 2f       	mov	r18, r28
   60a1a:	30 e0       	ldi	r19, 0x00	; 0
   60a1c:	81 e0       	ldi	r24, 0x01	; 1
   60a1e:	42 17       	cp	r20, r18
   60a20:	53 07       	cpc	r21, r19
   60a22:	29 f0       	breq	.+10     	; 0x60a2e <_nrf24l01p_readable+0x30>
   60a24:	80 e0       	ldi	r24, 0x00	; 0
   60a26:	03 c0       	rjmp	.+6      	; 0x60a2e <_nrf24l01p_readable+0x30>
   60a28:	80 e0       	ldi	r24, 0x00	; 0
   60a2a:	01 c0       	rjmp	.+2      	; 0x60a2e <_nrf24l01p_readable+0x30>
   60a2c:	80 e0       	ldi	r24, 0x00	; 0
   60a2e:	cf 91       	pop	r28
   60a30:	08 95       	ret

00060a32 <_nrf24l01p_read_dyn_pld>:

int _nrf24l01p_read_dyn_pld(_nrf24l01p_pipe_t pipe, uint8_t *data){
   60a32:	0f 93       	push	r16
   60a34:	1f 93       	push	r17
   60a36:	cf 93       	push	r28
   60a38:	df 93       	push	r29
	
	int rxPayloadWidth;
	
	if ( ( pipe < 0 ) || ( pipe > 5 ) ) {
   60a3a:	86 30       	cpi	r24, 0x06	; 6
   60a3c:	f0 f4       	brcc	.+60     	; 0x60a7a <_nrf24l01p_read_dyn_pld+0x48>
   60a3e:	eb 01       	movw	r28, r22
		return -1;
	}
	
	if (_nrf24l01p_readable(pipe) ) {
   60a40:	1f 94 ff 04 	call	0x609fe	; 0x609fe <_nrf24l01p_readable>
   60a44:	88 23       	and	r24, r24
   60a46:	e1 f0       	breq	.+56     	; 0x60a80 <_nrf24l01p_read_dyn_pld+0x4e>
		asm("nop");
   60a48:	00 00       	nop
		rxPayloadWidth = _nrf24l01p_read_rx_payload_width();
   60a4a:	1f 94 e7 01 	call	0x603ce	; 0x603ce <_nrf24l01p_read_rx_payload_width>
   60a4e:	8c 01       	movw	r16, r24
	
		if ( ( rxPayloadWidth < 0 ) || ( rxPayloadWidth > _NRF24L01P_RX_FIFO_SIZE ) ) {
   60a50:	81 32       	cpi	r24, 0x21	; 33
   60a52:	91 05       	cpc	r25, r1
   60a54:	28 f0       	brcs	.+10     	; 0x60a60 <_nrf24l01p_read_dyn_pld+0x2e>
			_nrf24l01p_flush_rx();
   60a56:	1f 94 dd 01 	call	0x603ba	; 0x603ba <_nrf24l01p_flush_rx>
			if(_nrf24l01p_get_fifo_flag_rx_empty()) {
				_nrf24l01p_clear_data_ready_flag();
			}
		}

		return rxPayloadWidth;
   60a5a:	80 2f       	mov	r24, r16
   60a5c:	91 2f       	mov	r25, r17
   60a5e:	15 c0       	rjmp	.+42     	; 0x60a8a <_nrf24l01p_read_dyn_pld+0x58>
	
		if ( ( rxPayloadWidth < 0 ) || ( rxPayloadWidth > _NRF24L01P_RX_FIFO_SIZE ) ) {
			_nrf24l01p_flush_rx();
		}
		else{
			_nrf24l01p_read_rx_payload(data,rxPayloadWidth);
   60a60:	bc 01       	movw	r22, r24
   60a62:	ce 01       	movw	r24, r28
   60a64:	1f 94 b0 01 	call	0x60360	; 0x60360 <_nrf24l01p_read_rx_payload>
					
			if(_nrf24l01p_get_fifo_flag_rx_empty()) {
   60a68:	1f 94 90 03 	call	0x60720	; 0x60720 <_nrf24l01p_get_fifo_flag_rx_empty>
   60a6c:	88 23       	and	r24, r24
   60a6e:	59 f0       	breq	.+22     	; 0x60a86 <_nrf24l01p_read_dyn_pld+0x54>
				_nrf24l01p_clear_data_ready_flag();
   60a70:	1f 94 ea 04 	call	0x609d4	; 0x609d4 <_nrf24l01p_clear_data_ready_flag>
			}
		}

		return rxPayloadWidth;
   60a74:	80 2f       	mov	r24, r16
   60a76:	91 2f       	mov	r25, r17
   60a78:	08 c0       	rjmp	.+16     	; 0x60a8a <_nrf24l01p_read_dyn_pld+0x58>
int _nrf24l01p_read_dyn_pld(_nrf24l01p_pipe_t pipe, uint8_t *data){
	
	int rxPayloadWidth;
	
	if ( ( pipe < 0 ) || ( pipe > 5 ) ) {
		return -1;
   60a7a:	8f ef       	ldi	r24, 0xFF	; 255
   60a7c:	9f ef       	ldi	r25, 0xFF	; 255
   60a7e:	05 c0       	rjmp	.+10     	; 0x60a8a <_nrf24l01p_read_dyn_pld+0x58>
// 			_nrf24l01p_clear_data_ready_flag();
// 		}
// 		return rxPayloadWidth;
//	}
	else {//if pipe not readable
		return 0;
   60a80:	80 e0       	ldi	r24, 0x00	; 0
   60a82:	90 e0       	ldi	r25, 0x00	; 0
   60a84:	02 c0       	rjmp	.+4      	; 0x60a8a <_nrf24l01p_read_dyn_pld+0x58>
			if(_nrf24l01p_get_fifo_flag_rx_empty()) {
				_nrf24l01p_clear_data_ready_flag();
			}
		}

		return rxPayloadWidth;
   60a86:	80 2f       	mov	r24, r16
   60a88:	91 2f       	mov	r25, r17
//	}
	else {//if pipe not readable
		return 0;
	}
	return 0;
}
   60a8a:	df 91       	pop	r29
   60a8c:	cf 91       	pop	r28
   60a8e:	1f 91       	pop	r17
   60a90:	0f 91       	pop	r16
   60a92:	08 95       	ret

00060a94 <command_handler>:

volatile bool nrf_led_flag  =0;



void *command_handler(char **args,int arg_count){
   60a94:	0f 93       	push	r16
   60a96:	1f 93       	push	r17
   60a98:	cf 93       	push	r28
   60a9a:	df 93       	push	r29
   60a9c:	8c 01       	movw	r16, r24

	if(!strcmp(args[0], "tst1") ) {
   60a9e:	fc 01       	movw	r30, r24
   60aa0:	c0 81       	ld	r28, Z
   60aa2:	d1 81       	ldd	r29, Z+1	; 0x01
   60aa4:	69 e0       	ldi	r22, 0x09	; 9
   60aa6:	70 e2       	ldi	r23, 0x20	; 32
   60aa8:	ce 01       	movw	r24, r28
   60aaa:	1f 94 80 07 	call	0x60f00	; 0x60f00 <strcmp>
   60aae:	89 2b       	or	r24, r25
   60ab0:	29 f4       	brne	.+10     	; 0x60abc <command_handler+0x28>
		DigitalPin_SetValue(&led);
   60ab2:	86 e0       	ldi	r24, 0x06	; 6
   60ab4:	90 e2       	ldi	r25, 0x20	; 32
   60ab6:	1f 94 92 06 	call	0x60d24	; 0x60d24 <DigitalPin_SetValue>
   60aba:	51 c0       	rjmp	.+162    	; 0x60b5e <command_handler+0xca>
	}
	else if(!strcmp(args[0], "tst2") ) {
   60abc:	6e e0       	ldi	r22, 0x0E	; 14
   60abe:	70 e2       	ldi	r23, 0x20	; 32
   60ac0:	ce 01       	movw	r24, r28
   60ac2:	1f 94 80 07 	call	0x60f00	; 0x60f00 <strcmp>
   60ac6:	89 2b       	or	r24, r25
   60ac8:	29 f4       	brne	.+10     	; 0x60ad4 <command_handler+0x40>
		DigitalPin_ClearValue(&led);
   60aca:	86 e0       	ldi	r24, 0x06	; 6
   60acc:	90 e2       	ldi	r25, 0x20	; 32
   60ace:	1f 94 a2 06 	call	0x60d44	; 0x60d44 <DigitalPin_ClearValue>
   60ad2:	45 c0       	rjmp	.+138    	; 0x60b5e <command_handler+0xca>
	}
	else if(!strcmp(args[0], "bre") ) {
   60ad4:	63 e1       	ldi	r22, 0x13	; 19
   60ad6:	70 e2       	ldi	r23, 0x20	; 32
   60ad8:	ce 01       	movw	r24, r28
   60ada:	1f 94 80 07 	call	0x60f00	; 0x60f00 <strcmp>
   60ade:	89 2b       	or	r24, r25
   60ae0:	09 f4       	brne	.+2      	; 0x60ae4 <command_handler+0x50>
   60ae2:	3d c0       	rjmp	.+122    	; 0x60b5e <command_handler+0xca>

	}
	else if(!strcmp(args[0], "blb") ) {
   60ae4:	67 e1       	ldi	r22, 0x17	; 23
   60ae6:	70 e2       	ldi	r23, 0x20	; 32
   60ae8:	ce 01       	movw	r24, r28
   60aea:	1f 94 80 07 	call	0x60f00	; 0x60f00 <strcmp>
   60aee:	89 2b       	or	r24, r25
   60af0:	09 f4       	brne	.+2      	; 0x60af4 <command_handler+0x60>
   60af2:	35 c0       	rjmp	.+106    	; 0x60b5e <command_handler+0xca>

	}
	else if(!strcmp(args[0], "bpe") ) {
   60af4:	6b e1       	ldi	r22, 0x1B	; 27
   60af6:	70 e2       	ldi	r23, 0x20	; 32
   60af8:	ce 01       	movw	r24, r28
   60afa:	1f 94 80 07 	call	0x60f00	; 0x60f00 <strcmp>
   60afe:	89 2b       	or	r24, r25
   60b00:	71 f1       	breq	.+92     	; 0x60b5e <command_handler+0xca>

	}
	else if(!strcmp(args[0], "rst") ) {
   60b02:	6f e1       	ldi	r22, 0x1F	; 31
   60b04:	70 e2       	ldi	r23, 0x20	; 32
   60b06:	ce 01       	movw	r24, r28
   60b08:	1f 94 80 07 	call	0x60f00	; 0x60f00 <strcmp>
   60b0c:	89 2b       	or	r24, r25
   60b0e:	39 f5       	brne	.+78     	; 0x60b5e <command_handler+0xca>
		if(!strcmp(args[1], "app") ){
   60b10:	f8 01       	movw	r30, r16
   60b12:	c2 81       	ldd	r28, Z+2	; 0x02
   60b14:	d3 81       	ldd	r29, Z+3	; 0x03
   60b16:	63 e2       	ldi	r22, 0x23	; 35
   60b18:	70 e2       	ldi	r23, 0x20	; 32
   60b1a:	ce 01       	movw	r24, r28
   60b1c:	1f 94 80 07 	call	0x60f00	; 0x60f00 <strcmp>
   60b20:	89 2b       	or	r24, r25
   60b22:	49 f4       	brne	.+18     	; 0x60b36 <command_handler+0xa2>

 			CCPWrite(&(PMIC.CTRL), 0 );
   60b24:	60 e0       	ldi	r22, 0x00	; 0
   60b26:	82 ea       	ldi	r24, 0xA2	; 162
   60b28:	90 e0       	ldi	r25, 0x00	; 0
   60b2a:	1f 94 2a 07 	call	0x60e54	; 0x60e54 <CCPWrite>

			asm("ldi r30, 0");
   60b2e:	e0 e0       	ldi	r30, 0x00	; 0
			asm("ldi r31, 0");
   60b30:	f0 e0       	ldi	r31, 0x00	; 0
			asm("IJMP");
   60b32:	09 94       	ijmp
   60b34:	14 c0       	rjmp	.+40     	; 0x60b5e <command_handler+0xca>

		}
		else if(!strcmp(args[1], "boot") ){
   60b36:	67 e2       	ldi	r22, 0x27	; 39
   60b38:	70 e2       	ldi	r23, 0x20	; 32
   60b3a:	ce 01       	movw	r24, r28
   60b3c:	1f 94 80 07 	call	0x60f00	; 0x60f00 <strcmp>
   60b40:	89 2b       	or	r24, r25
   60b42:	69 f4       	brne	.+26     	; 0x60b5e <command_handler+0xca>
			soft_reset();
   60b44:	93 e0       	ldi	r25, 0x03	; 3
   60b46:	88 ed       	ldi	r24, 0xD8	; 216
   60b48:	08 b6       	in	r0, 0x38	; 56
   60b4a:	18 be       	out	0x38, r1	; 56
   60b4c:	84 bf       	out	0x34, r24	; 52
   60b4e:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
   60b52:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
   60b56:	81 fd       	sbrc	r24, 1
   60b58:	fc cf       	rjmp	.-8      	; 0x60b52 <command_handler+0xbe>
   60b5a:	08 be       	out	0x38, r0	; 56
   60b5c:	ff cf       	rjmp	.-2      	; 0x60b5c <command_handler+0xc8>
	else{

	}

	return 0;
}
   60b5e:	80 e0       	ldi	r24, 0x00	; 0
   60b60:	90 e0       	ldi	r25, 0x00	; 0
   60b62:	df 91       	pop	r29
   60b64:	cf 91       	pop	r28
   60b66:	1f 91       	pop	r17
   60b68:	0f 91       	pop	r16
   60b6a:	08 95       	ret

00060b6c <command_parse_execute>:

void command_parse_execute(char *command){
   60b6c:	ef 92       	push	r14
   60b6e:	ff 92       	push	r15
   60b70:	0f 93       	push	r16
   60b72:	1f 93       	push	r17
   60b74:	cf 93       	push	r28
   60b76:	df 93       	push	r29
   60b78:	cd b7       	in	r28, 0x3d	; 61
   60b7a:	de b7       	in	r29, 0x3e	; 62
   60b7c:	64 97       	sbiw	r28, 0x14	; 20
   60b7e:	cd bf       	out	0x3d, r28	; 61
   60b80:	de bf       	out	0x3e, r29	; 62

	int arg_index = 0;
	char *pch;
	char *remotch_args[ 10];
	pch = strtok(command, " ,");
   60b82:	6c e2       	ldi	r22, 0x2C	; 44
   60b84:	70 e2       	ldi	r23, 0x20	; 32
   60b86:	1f 94 7c 07 	call	0x60ef8	; 0x60ef8 <strtok>
	while(pch != NULL) {
   60b8a:	00 97       	sbiw	r24, 0x00	; 0
   60b8c:	d9 f0       	breq	.+54     	; 0x60bc4 <command_parse_execute+0x58>
		remotch_args[arg_index] = pch;
   60b8e:	89 83       	std	Y+1, r24	; 0x01
   60b90:	9a 83       	std	Y+2, r25	; 0x02
   60b92:	7e 01       	movw	r14, r28
   60b94:	83 e0       	ldi	r24, 0x03	; 3
   60b96:	e8 0e       	add	r14, r24
   60b98:	f1 1c       	adc	r15, r1
   60b9a:	01 e0       	ldi	r16, 0x01	; 1
   60b9c:	10 e0       	ldi	r17, 0x00	; 0
   60b9e:	09 c0       	rjmp	.+18     	; 0x60bb2 <command_parse_execute+0x46>
   60ba0:	f7 01       	movw	r30, r14
   60ba2:	81 93       	st	Z+, r24
   60ba4:	91 93       	st	Z+, r25
   60ba6:	7f 01       	movw	r14, r30
		arg_index++;
   60ba8:	0f 5f       	subi	r16, 0xFF	; 255
   60baa:	1f 4f       	sbci	r17, 0xFF	; 255
		if(arg_index >=10) break;
   60bac:	0a 30       	cpi	r16, 0x0A	; 10
   60bae:	11 05       	cpc	r17, r1
   60bb0:	59 f0       	breq	.+22     	; 0x60bc8 <command_parse_execute+0x5c>
		pch = strtok (NULL, " ,");
   60bb2:	6c e2       	ldi	r22, 0x2C	; 44
   60bb4:	70 e2       	ldi	r23, 0x20	; 32
   60bb6:	80 e0       	ldi	r24, 0x00	; 0
   60bb8:	90 e0       	ldi	r25, 0x00	; 0
   60bba:	1f 94 7c 07 	call	0x60ef8	; 0x60ef8 <strtok>

	int arg_index = 0;
	char *pch;
	char *remotch_args[ 10];
	pch = strtok(command, " ,");
	while(pch != NULL) {
   60bbe:	00 97       	sbiw	r24, 0x00	; 0
   60bc0:	79 f7       	brne	.-34     	; 0x60ba0 <command_parse_execute+0x34>
   60bc2:	02 c0       	rjmp	.+4      	; 0x60bc8 <command_parse_execute+0x5c>
	return 0;
}

void command_parse_execute(char *command){

	int arg_index = 0;
   60bc4:	00 e0       	ldi	r16, 0x00	; 0
   60bc6:	10 e0       	ldi	r17, 0x00	; 0
		remotch_args[arg_index] = pch;
		arg_index++;
		if(arg_index >=10) break;
		pch = strtok (NULL, " ,");
	}
	command_handler(remotch_args,arg_index);
   60bc8:	b8 01       	movw	r22, r16
   60bca:	ce 01       	movw	r24, r28
   60bcc:	01 96       	adiw	r24, 0x01	; 1
   60bce:	1f 94 4a 05 	call	0x60a94	; 0x60a94 <command_handler>
}
   60bd2:	64 96       	adiw	r28, 0x14	; 20
   60bd4:	cd bf       	out	0x3d, r28	; 61
   60bd6:	de bf       	out	0x3e, r29	; 62
   60bd8:	df 91       	pop	r29
   60bda:	cf 91       	pop	r28
   60bdc:	1f 91       	pop	r17
   60bde:	0f 91       	pop	r16
   60be0:	ff 90       	pop	r15
   60be2:	ef 90       	pop	r14
   60be4:	08 95       	ret

00060be6 <main>:
uint8_t myflashpagedata[512];
uint8_t myflashpagedata2[512];


int main(void)
{
   60be6:	cf 93       	push	r28
   60be8:	df 93       	push	r29
   60bea:	cd b7       	in	r28, 0x3d	; 61
   60bec:	de b7       	in	r29, 0x3e	; 62
   60bee:	a3 97       	sbiw	r28, 0x23	; 35
   60bf0:	cd bf       	out	0x3d, r28	; 61
   60bf2:	de bf       	out	0x3e, r29	; 62
	CLKSYS_Enable( OSC_RC32MEN_bm );
   60bf4:	e0 e5       	ldi	r30, 0x50	; 80
   60bf6:	f0 e0       	ldi	r31, 0x00	; 0
   60bf8:	80 81       	ld	r24, Z
   60bfa:	82 60       	ori	r24, 0x02	; 2
   60bfc:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_RC32MRDY_bm ) == 0 );
   60bfe:	81 81       	ldd	r24, Z+1	; 0x01
   60c00:	81 ff       	sbrs	r24, 1
   60c02:	fd cf       	rjmp	.-6      	; 0x60bfe <main+0x18>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
   60c04:	81 e0       	ldi	r24, 0x01	; 1
   60c06:	1f 94 49 07 	call	0x60e92	; 0x60e92 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
   60c0a:	81 e0       	ldi	r24, 0x01	; 1
   60c0c:	1f 94 3f 07 	call	0x60e7e	; 0x60e7e <CLKSYS_Disable>
   60c10:	28 e3       	ldi	r18, 0x38	; 56
   60c12:	30 e2       	ldi	r19, 0x20	; 32
   60c14:	88 e3       	ldi	r24, 0x38	; 56
   60c16:	92 e2       	ldi	r25, 0x22	; 34
   60c18:	f9 01       	movw	r30, r18
   60c1a:	4e 2f       	mov	r20, r30
   60c1c:	42 1b       	sub	r20, r18


	for(int i=0;i<512;i++){
		myflashpagedata[i] = i;
   60c1e:	41 93       	st	Z+, r20
	do {} while ( CLKSYS_IsReady( OSC_RC32MRDY_bm ) == 0 );
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
	CLKSYS_Disable( OSC_RC2MEN_bm );


	for(int i=0;i<512;i++){
   60c20:	e8 17       	cp	r30, r24
   60c22:	f9 07       	cpc	r31, r25
   60c24:	d1 f7       	brne	.-12     	; 0x60c1a <main+0x34>
		myflashpagedata[i] = i;
	}


	CCPWrite(&(PMIC.CTRL), PMIC_IVSEL_bm );
   60c26:	60 e4       	ldi	r22, 0x40	; 64
   60c28:	82 ea       	ldi	r24, 0xA2	; 162
   60c2a:	90 e0       	ldi	r25, 0x00	; 0
   60c2c:	1f 94 2a 07 	call	0x60e54	; 0x60e54 <CCPWrite>



	
	uint64_t nrfaddress = 0x4C4C4C4C31;
	_nrf24l01p_init();
   60c30:	1f 94 47 04 	call	0x6088e	; 0x6088e <_nrf24l01p_init>

	//LEFT
	_nrf24l01p_set_RX_pipe_address(_NRF24L01P_PIPE_P1, 0x4C4C4C4C31);
   60c34:	01 e3       	ldi	r16, 0x31	; 49
   60c36:	1c e4       	ldi	r17, 0x4C	; 76
   60c38:	2c e4       	ldi	r18, 0x4C	; 76
   60c3a:	3c e4       	ldi	r19, 0x4C	; 76
   60c3c:	4c e4       	ldi	r20, 0x4C	; 76
   60c3e:	50 e0       	ldi	r21, 0x00	; 0
   60c40:	60 e0       	ldi	r22, 0x00	; 0
   60c42:	70 e0       	ldi	r23, 0x00	; 0
   60c44:	81 e0       	ldi	r24, 0x01	; 1
   60c46:	1f 94 22 03 	call	0x60644	; 0x60644 <_nrf24l01p_set_RX_pipe_address>
	_nrf24l01p_set_RX_pipe_address(_NRF24L01P_PIPE_P2, nrfaddress+1);
   60c4a:	02 e3       	ldi	r16, 0x32	; 50
   60c4c:	2c e4       	ldi	r18, 0x4C	; 76
   60c4e:	3c e4       	ldi	r19, 0x4C	; 76
   60c50:	4c e4       	ldi	r20, 0x4C	; 76
   60c52:	50 e0       	ldi	r21, 0x00	; 0
   60c54:	60 e0       	ldi	r22, 0x00	; 0
   60c56:	70 e0       	ldi	r23, 0x00	; 0
   60c58:	82 e0       	ldi	r24, 0x02	; 2
   60c5a:	1f 94 22 03 	call	0x60644	; 0x60644 <_nrf24l01p_set_RX_pipe_address>
	_nrf24l01p_set_RX_pipe_address(_NRF24L01P_PIPE_P3, nrfaddress+2);
   60c5e:	03 e3       	ldi	r16, 0x33	; 51
   60c60:	2c e4       	ldi	r18, 0x4C	; 76
   60c62:	3c e4       	ldi	r19, 0x4C	; 76
   60c64:	4c e4       	ldi	r20, 0x4C	; 76
   60c66:	50 e0       	ldi	r21, 0x00	; 0
   60c68:	60 e0       	ldi	r22, 0x00	; 0
   60c6a:	70 e0       	ldi	r23, 0x00	; 0
   60c6c:	83 e0       	ldi	r24, 0x03	; 3
   60c6e:	1f 94 22 03 	call	0x60644	; 0x60644 <_nrf24l01p_set_RX_pipe_address>
	_nrf24l01p_set_RX_pipe_address(_NRF24L01P_PIPE_P4, nrfaddress+3);
   60c72:	04 e3       	ldi	r16, 0x34	; 52
   60c74:	2c e4       	ldi	r18, 0x4C	; 76
   60c76:	3c e4       	ldi	r19, 0x4C	; 76
   60c78:	4c e4       	ldi	r20, 0x4C	; 76
   60c7a:	50 e0       	ldi	r21, 0x00	; 0
   60c7c:	60 e0       	ldi	r22, 0x00	; 0
   60c7e:	70 e0       	ldi	r23, 0x00	; 0
   60c80:	84 e0       	ldi	r24, 0x04	; 4
   60c82:	1f 94 22 03 	call	0x60644	; 0x60644 <_nrf24l01p_set_RX_pipe_address>
	_nrf24l01p_set_RX_pipe_address(_NRF24L01P_PIPE_P5, nrfaddress+4);
   60c86:	05 e3       	ldi	r16, 0x35	; 53
   60c88:	2c e4       	ldi	r18, 0x4C	; 76
   60c8a:	3c e4       	ldi	r19, 0x4C	; 76
   60c8c:	4c e4       	ldi	r20, 0x4C	; 76
   60c8e:	50 e0       	ldi	r21, 0x00	; 0
   60c90:	60 e0       	ldi	r22, 0x00	; 0
   60c92:	70 e0       	ldi	r23, 0x00	; 0
   60c94:	85 e0       	ldi	r24, 0x05	; 5
   60c96:	1f 94 22 03 	call	0x60644	; 0x60644 <_nrf24l01p_set_RX_pipe_address>
	char rxData[35];
	DigitalPin_SetDir(&led,1);
   60c9a:	61 e0       	ldi	r22, 0x01	; 1
   60c9c:	86 e0       	ldi	r24, 0x06	; 6
   60c9e:	90 e2       	ldi	r25, 0x20	; 32
   60ca0:	1f 94 70 06 	call	0x60ce0	; 0x60ce0 <DigitalPin_SetDir>
	DigitalPin_ClearValue(&led);
   60ca4:	86 e0       	ldi	r24, 0x06	; 6
   60ca6:	90 e2       	ldi	r25, 0x20	; 32
   60ca8:	1f 94 a2 06 	call	0x60d44	; 0x60d44 <DigitalPin_ClearValue>
	while(1){

		if((_nrf24l01p_readable(_NRF24L01P_PIPE_P1))){
   60cac:	81 e0       	ldi	r24, 0x01	; 1
   60cae:	1f 94 ff 04 	call	0x609fe	; 0x609fe <_nrf24l01p_readable>
   60cb2:	88 23       	and	r24, r24
   60cb4:	d9 f3       	breq	.-10     	; 0x60cac <main+0xc6>
			asm("nop");
   60cb6:	00 00       	nop
			nrf_led_flag = 1;
   60cb8:	81 e0       	ldi	r24, 0x01	; 1
   60cba:	80 93 32 20 	sts	0x2032, r24	; 0x802032 <nrf_led_flag>
			int width = _nrf24l01p_read_dyn_pld(_NRF24L01P_PIPE_P1, (uint8_t*) rxData);
   60cbe:	be 01       	movw	r22, r28
   60cc0:	6f 5f       	subi	r22, 0xFF	; 255
   60cc2:	7f 4f       	sbci	r23, 0xFF	; 255
   60cc4:	1f 94 19 05 	call	0x60a32	; 0x60a32 <_nrf24l01p_read_dyn_pld>
			rxData[width] = '\0';
   60cc8:	21 e0       	ldi	r18, 0x01	; 1
   60cca:	30 e0       	ldi	r19, 0x00	; 0
   60ccc:	2c 0f       	add	r18, r28
   60cce:	3d 1f       	adc	r19, r29
   60cd0:	82 0f       	add	r24, r18
   60cd2:	93 1f       	adc	r25, r19
   60cd4:	fc 01       	movw	r30, r24
   60cd6:	10 82       	st	Z, r1
			command_parse_execute(rxData);
   60cd8:	c9 01       	movw	r24, r18
   60cda:	1f 94 b6 05 	call	0x60b6c	; 0x60b6c <command_parse_execute>
   60cde:	e6 cf       	rjmp	.-52     	; 0x60cac <main+0xc6>

00060ce0 <DigitalPin_SetDir>:
	SREG = sreg;	
}


void DigitalPin_SetDir(DigitalPin_t *pin , bool dir){
	if(dir) {
   60ce0:	66 23       	and	r22, r22
   60ce2:	81 f0       	breq	.+32     	; 0x60d04 <DigitalPin_SetDir+0x24>
		pin->_port->DIRSET = (1<< pin->_pin);
   60ce4:	dc 01       	movw	r26, r24
   60ce6:	ed 91       	ld	r30, X+
   60ce8:	fc 91       	ld	r31, X
   60cea:	11 97       	sbiw	r26, 0x01	; 1
   60cec:	21 e0       	ldi	r18, 0x01	; 1
   60cee:	30 e0       	ldi	r19, 0x00	; 0
   60cf0:	a9 01       	movw	r20, r18
   60cf2:	12 96       	adiw	r26, 0x02	; 2
   60cf4:	0c 90       	ld	r0, X
   60cf6:	02 c0       	rjmp	.+4      	; 0x60cfc <DigitalPin_SetDir+0x1c>
   60cf8:	44 0f       	add	r20, r20
   60cfa:	55 1f       	adc	r21, r21
   60cfc:	0a 94       	dec	r0
   60cfe:	e2 f7       	brpl	.-8      	; 0x60cf8 <DigitalPin_SetDir+0x18>
   60d00:	41 83       	std	Z+1, r20	; 0x01
   60d02:	08 95       	ret
	}
	else{
		pin->_port->DIRCLR = (1<< pin->_pin);
   60d04:	dc 01       	movw	r26, r24
   60d06:	ed 91       	ld	r30, X+
   60d08:	fc 91       	ld	r31, X
   60d0a:	11 97       	sbiw	r26, 0x01	; 1
   60d0c:	21 e0       	ldi	r18, 0x01	; 1
   60d0e:	30 e0       	ldi	r19, 0x00	; 0
   60d10:	a9 01       	movw	r20, r18
   60d12:	12 96       	adiw	r26, 0x02	; 2
   60d14:	0c 90       	ld	r0, X
   60d16:	02 c0       	rjmp	.+4      	; 0x60d1c <DigitalPin_SetDir+0x3c>
   60d18:	44 0f       	add	r20, r20
   60d1a:	55 1f       	adc	r21, r21
   60d1c:	0a 94       	dec	r0
   60d1e:	e2 f7       	brpl	.-8      	; 0x60d18 <DigitalPin_SetDir+0x38>
   60d20:	42 83       	std	Z+2, r20	; 0x02
   60d22:	08 95       	ret

00060d24 <DigitalPin_SetValue>:
	}
}

void DigitalPin_SetValue(DigitalPin_t *pin){
	pin->_port->OUTSET = (1<< pin->_pin);
   60d24:	dc 01       	movw	r26, r24
   60d26:	ed 91       	ld	r30, X+
   60d28:	fc 91       	ld	r31, X
   60d2a:	11 97       	sbiw	r26, 0x01	; 1
   60d2c:	21 e0       	ldi	r18, 0x01	; 1
   60d2e:	30 e0       	ldi	r19, 0x00	; 0
   60d30:	a9 01       	movw	r20, r18
   60d32:	12 96       	adiw	r26, 0x02	; 2
   60d34:	0c 90       	ld	r0, X
   60d36:	02 c0       	rjmp	.+4      	; 0x60d3c <DigitalPin_SetValue+0x18>
   60d38:	44 0f       	add	r20, r20
   60d3a:	55 1f       	adc	r21, r21
   60d3c:	0a 94       	dec	r0
   60d3e:	e2 f7       	brpl	.-8      	; 0x60d38 <DigitalPin_SetValue+0x14>
   60d40:	45 83       	std	Z+5, r20	; 0x05
   60d42:	08 95       	ret

00060d44 <DigitalPin_ClearValue>:
}

void DigitalPin_ClearValue(DigitalPin_t *pin){
	pin->_port->OUTCLR = (1<< pin->_pin);
   60d44:	dc 01       	movw	r26, r24
   60d46:	ed 91       	ld	r30, X+
   60d48:	fc 91       	ld	r31, X
   60d4a:	11 97       	sbiw	r26, 0x01	; 1
   60d4c:	21 e0       	ldi	r18, 0x01	; 1
   60d4e:	30 e0       	ldi	r19, 0x00	; 0
   60d50:	a9 01       	movw	r20, r18
   60d52:	12 96       	adiw	r26, 0x02	; 2
   60d54:	0c 90       	ld	r0, X
   60d56:	02 c0       	rjmp	.+4      	; 0x60d5c <DigitalPin_ClearValue+0x18>
   60d58:	44 0f       	add	r20, r20
   60d5a:	55 1f       	adc	r21, r21
   60d5c:	0a 94       	dec	r0
   60d5e:	e2 f7       	brpl	.-8      	; 0x60d58 <DigitalPin_ClearValue+0x14>
   60d60:	46 83       	std	Z+6, r20	; 0x06
   60d62:	08 95       	ret

00060d64 <__vector_25>:


}

#if defined(USARTC0)
ISR(USARTC0_RXC_vect){
   60d64:	1f 92       	push	r1
   60d66:	0f 92       	push	r0
   60d68:	0f b6       	in	r0, 0x3f	; 63
   60d6a:	0f 92       	push	r0
   60d6c:	11 24       	eor	r1, r1

}
   60d6e:	0f 90       	pop	r0
   60d70:	0f be       	out	0x3f, r0	; 63
   60d72:	0f 90       	pop	r0
   60d74:	1f 90       	pop	r1
   60d76:	18 95       	reti

00060d78 <__vector_27>:

ISR(USARTC0_TXC_vect){
   60d78:	1f 92       	push	r1
   60d7a:	0f 92       	push	r0
   60d7c:	0f b6       	in	r0, 0x3f	; 63
   60d7e:	0f 92       	push	r0
   60d80:	11 24       	eor	r1, r1
	
}
   60d82:	0f 90       	pop	r0
   60d84:	0f be       	out	0x3f, r0	; 63
   60d86:	0f 90       	pop	r0
   60d88:	1f 90       	pop	r1
   60d8a:	18 95       	reti

00060d8c <__vector_26>:

ISR(USARTC0_DRE_vect){
   60d8c:	1f 92       	push	r1
   60d8e:	0f 92       	push	r0
   60d90:	0f b6       	in	r0, 0x3f	; 63
   60d92:	0f 92       	push	r0
   60d94:	11 24       	eor	r1, r1
	
}
   60d96:	0f 90       	pop	r0
   60d98:	0f be       	out	0x3f, r0	; 63
   60d9a:	0f 90       	pop	r0
   60d9c:	1f 90       	pop	r1
   60d9e:	18 95       	reti

00060da0 <__vector_28>:
#endif


#if defined(USARTC1)
ISR(USARTC1_RXC_vect){
   60da0:	1f 92       	push	r1
   60da2:	0f 92       	push	r0
   60da4:	0f b6       	in	r0, 0x3f	; 63
   60da6:	0f 92       	push	r0
   60da8:	11 24       	eor	r1, r1
	
}
   60daa:	0f 90       	pop	r0
   60dac:	0f be       	out	0x3f, r0	; 63
   60dae:	0f 90       	pop	r0
   60db0:	1f 90       	pop	r1
   60db2:	18 95       	reti

00060db4 <__vector_30>:

ISR(USARTC1_TXC_vect){
   60db4:	1f 92       	push	r1
   60db6:	0f 92       	push	r0
   60db8:	0f b6       	in	r0, 0x3f	; 63
   60dba:	0f 92       	push	r0
   60dbc:	11 24       	eor	r1, r1
	
}
   60dbe:	0f 90       	pop	r0
   60dc0:	0f be       	out	0x3f, r0	; 63
   60dc2:	0f 90       	pop	r0
   60dc4:	1f 90       	pop	r1
   60dc6:	18 95       	reti

00060dc8 <__vector_29>:

ISR(USARTC1_DRE_vect){
   60dc8:	1f 92       	push	r1
   60dca:	0f 92       	push	r0
   60dcc:	0f b6       	in	r0, 0x3f	; 63
   60dce:	0f 92       	push	r0
   60dd0:	11 24       	eor	r1, r1
	
}
   60dd2:	0f 90       	pop	r0
   60dd4:	0f be       	out	0x3f, r0	; 63
   60dd6:	0f 90       	pop	r0
   60dd8:	1f 90       	pop	r1
   60dda:	18 95       	reti

00060ddc <__vector_88>:
#endif


#if defined(USARTD0)
ISR(USARTD0_RXC_vect){
   60ddc:	1f 92       	push	r1
   60dde:	0f 92       	push	r0
   60de0:	0f b6       	in	r0, 0x3f	; 63
   60de2:	0f 92       	push	r0
   60de4:	11 24       	eor	r1, r1
	
}
   60de6:	0f 90       	pop	r0
   60de8:	0f be       	out	0x3f, r0	; 63
   60dea:	0f 90       	pop	r0
   60dec:	1f 90       	pop	r1
   60dee:	18 95       	reti

00060df0 <__vector_90>:

ISR(USARTD0_TXC_vect){
   60df0:	1f 92       	push	r1
   60df2:	0f 92       	push	r0
   60df4:	0f b6       	in	r0, 0x3f	; 63
   60df6:	0f 92       	push	r0
   60df8:	11 24       	eor	r1, r1
	
}
   60dfa:	0f 90       	pop	r0
   60dfc:	0f be       	out	0x3f, r0	; 63
   60dfe:	0f 90       	pop	r0
   60e00:	1f 90       	pop	r1
   60e02:	18 95       	reti

00060e04 <__vector_89>:

ISR(USARTD0_DRE_vect){
   60e04:	1f 92       	push	r1
   60e06:	0f 92       	push	r0
   60e08:	0f b6       	in	r0, 0x3f	; 63
   60e0a:	0f 92       	push	r0
   60e0c:	11 24       	eor	r1, r1
	
}
   60e0e:	0f 90       	pop	r0
   60e10:	0f be       	out	0x3f, r0	; 63
   60e12:	0f 90       	pop	r0
   60e14:	1f 90       	pop	r1
   60e16:	18 95       	reti

00060e18 <__vector_58>:
	
}
#endif

#if defined(USARTE0)
ISR(USARTE0_RXC_vect){
   60e18:	1f 92       	push	r1
   60e1a:	0f 92       	push	r0
   60e1c:	0f b6       	in	r0, 0x3f	; 63
   60e1e:	0f 92       	push	r0
   60e20:	11 24       	eor	r1, r1
	
}
   60e22:	0f 90       	pop	r0
   60e24:	0f be       	out	0x3f, r0	; 63
   60e26:	0f 90       	pop	r0
   60e28:	1f 90       	pop	r1
   60e2a:	18 95       	reti

00060e2c <__vector_60>:

ISR(USARTE0_TXC_vect){
   60e2c:	1f 92       	push	r1
   60e2e:	0f 92       	push	r0
   60e30:	0f b6       	in	r0, 0x3f	; 63
   60e32:	0f 92       	push	r0
   60e34:	11 24       	eor	r1, r1
	
}
   60e36:	0f 90       	pop	r0
   60e38:	0f be       	out	0x3f, r0	; 63
   60e3a:	0f 90       	pop	r0
   60e3c:	1f 90       	pop	r1
   60e3e:	18 95       	reti

00060e40 <__vector_59>:

ISR(USARTE0_DRE_vect){
   60e40:	1f 92       	push	r1
   60e42:	0f 92       	push	r0
   60e44:	0f b6       	in	r0, 0x3f	; 63
   60e46:	0f 92       	push	r0
   60e48:	11 24       	eor	r1, r1
	
}
   60e4a:	0f 90       	pop	r0
   60e4c:	0f be       	out	0x3f, r0	; 63
   60e4e:	0f 90       	pop	r0
   60e50:	1f 90       	pop	r1
   60e52:	18 95       	reti

00060e54 <CCPWrite>:
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
   60e54:	0f 93       	push	r16
   60e56:	cf 93       	push	r28
   60e58:	df 93       	push	r29
   60e5a:	1f 92       	push	r1
   60e5c:	cd b7       	in	r28, 0x3d	; 61
   60e5e:	de b7       	in	r29, 0x3e	; 62
   60e60:	2f b7       	in	r18, 0x3f	; 63
   60e62:	29 83       	std	Y+1, r18	; 0x01
   60e64:	f8 94       	cli
   60e66:	1b be       	out	0x3b, r1	; 59
   60e68:	fc 01       	movw	r30, r24
   60e6a:	08 ed       	ldi	r16, 0xD8	; 216
   60e6c:	04 bf       	out	0x34, r16	; 52
   60e6e:	60 83       	st	Z, r22
   60e70:	89 81       	ldd	r24, Y+1	; 0x01
   60e72:	8f bf       	out	0x3f, r24	; 63
   60e74:	0f 90       	pop	r0
   60e76:	df 91       	pop	r29
   60e78:	cf 91       	pop	r28
   60e7a:	0f 91       	pop	r16
   60e7c:	08 95       	ret

00060e7e <CLKSYS_Disable>:
   60e7e:	e0 e5       	ldi	r30, 0x50	; 80
   60e80:	f0 e0       	ldi	r31, 0x00	; 0
   60e82:	90 81       	ld	r25, Z
   60e84:	28 2f       	mov	r18, r24
   60e86:	20 95       	com	r18
   60e88:	92 23       	and	r25, r18
   60e8a:	90 83       	st	Z, r25
   60e8c:	90 81       	ld	r25, Z
   60e8e:	89 23       	and	r24, r25
   60e90:	08 95       	ret

00060e92 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
   60e92:	0f 93       	push	r16
   60e94:	1f 93       	push	r17
   60e96:	cf 93       	push	r28
   60e98:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
   60e9a:	00 e4       	ldi	r16, 0x40	; 64
   60e9c:	10 e0       	ldi	r17, 0x00	; 0
   60e9e:	f8 01       	movw	r30, r16
   60ea0:	60 81       	ld	r22, Z
   60ea2:	68 7f       	andi	r22, 0xF8	; 248
   60ea4:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
   60ea6:	80 e4       	ldi	r24, 0x40	; 64
   60ea8:	90 e0       	ldi	r25, 0x00	; 0
   60eaa:	1f 94 2a 07 	call	0x60e54	; 0x60e54 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
   60eae:	f8 01       	movw	r30, r16
   60eb0:	80 81       	ld	r24, Z
	return clkCtrl;
}
   60eb2:	8c 23       	and	r24, r28
   60eb4:	cf 91       	pop	r28
   60eb6:	1f 91       	pop	r17
   60eb8:	0f 91       	pop	r16
   60eba:	08 95       	ret

00060ebc <__ashrdi3>:
   60ebc:	97 fb       	bst	r25, 7
   60ebe:	10 f8       	bld	r1, 0

00060ec0 <__lshrdi3>:
   60ec0:	16 94       	lsr	r1
   60ec2:	00 08       	sbc	r0, r0
   60ec4:	0f 93       	push	r16
   60ec6:	08 30       	cpi	r16, 0x08	; 8
   60ec8:	98 f0       	brcs	.+38     	; 0x60ef0 <__lshrdi3+0x30>
   60eca:	08 50       	subi	r16, 0x08	; 8
   60ecc:	23 2f       	mov	r18, r19
   60ece:	34 2f       	mov	r19, r20
   60ed0:	45 2f       	mov	r20, r21
   60ed2:	56 2f       	mov	r21, r22
   60ed4:	67 2f       	mov	r22, r23
   60ed6:	78 2f       	mov	r23, r24
   60ed8:	89 2f       	mov	r24, r25
   60eda:	90 2d       	mov	r25, r0
   60edc:	f4 cf       	rjmp	.-24     	; 0x60ec6 <__lshrdi3+0x6>
   60ede:	05 94       	asr	r0
   60ee0:	97 95       	ror	r25
   60ee2:	87 95       	ror	r24
   60ee4:	77 95       	ror	r23
   60ee6:	67 95       	ror	r22
   60ee8:	57 95       	ror	r21
   60eea:	47 95       	ror	r20
   60eec:	37 95       	ror	r19
   60eee:	27 95       	ror	r18
   60ef0:	0a 95       	dec	r16
   60ef2:	aa f7       	brpl	.-22     	; 0x60ede <__lshrdi3+0x1e>
   60ef4:	0f 91       	pop	r16
   60ef6:	08 95       	ret

00060ef8 <strtok>:
   60ef8:	40 e3       	ldi	r20, 0x30	; 48
   60efa:	50 e2       	ldi	r21, 0x20	; 32
   60efc:	1d 94 89 07 	jmp	0x60f12	; 0x60f12 <strtok_r>

00060f00 <strcmp>:
   60f00:	fb 01       	movw	r30, r22
   60f02:	dc 01       	movw	r26, r24
   60f04:	8d 91       	ld	r24, X+
   60f06:	01 90       	ld	r0, Z+
   60f08:	80 19       	sub	r24, r0
   60f0a:	01 10       	cpse	r0, r1
   60f0c:	d9 f3       	breq	.-10     	; 0x60f04 <strcmp+0x4>
   60f0e:	99 0b       	sbc	r25, r25
   60f10:	08 95       	ret

00060f12 <strtok_r>:
   60f12:	fa 01       	movw	r30, r20
   60f14:	a1 91       	ld	r26, Z+
   60f16:	b0 81       	ld	r27, Z
   60f18:	00 97       	sbiw	r24, 0x00	; 0
   60f1a:	19 f4       	brne	.+6      	; 0x60f22 <strtok_r+0x10>
   60f1c:	10 97       	sbiw	r26, 0x00	; 0
   60f1e:	e1 f0       	breq	.+56     	; 0x60f58 <strtok_r+0x46>
   60f20:	cd 01       	movw	r24, r26
   60f22:	dc 01       	movw	r26, r24
   60f24:	cd 01       	movw	r24, r26
   60f26:	0d 90       	ld	r0, X+
   60f28:	00 20       	and	r0, r0
   60f2a:	11 f4       	brne	.+4      	; 0x60f30 <strtok_r+0x1e>
   60f2c:	c0 01       	movw	r24, r0
   60f2e:	13 c0       	rjmp	.+38     	; 0x60f56 <strtok_r+0x44>
   60f30:	fb 01       	movw	r30, r22
   60f32:	21 91       	ld	r18, Z+
   60f34:	22 23       	and	r18, r18
   60f36:	19 f0       	breq	.+6      	; 0x60f3e <strtok_r+0x2c>
   60f38:	20 15       	cp	r18, r0
   60f3a:	d9 f7       	brne	.-10     	; 0x60f32 <strtok_r+0x20>
   60f3c:	f3 cf       	rjmp	.-26     	; 0x60f24 <strtok_r+0x12>
   60f3e:	fb 01       	movw	r30, r22
   60f40:	21 91       	ld	r18, Z+
   60f42:	20 15       	cp	r18, r0
   60f44:	19 f4       	brne	.+6      	; 0x60f4c <strtok_r+0x3a>
   60f46:	1e 92       	st	-X, r1
   60f48:	11 96       	adiw	r26, 0x01	; 1
   60f4a:	06 c0       	rjmp	.+12     	; 0x60f58 <strtok_r+0x46>
   60f4c:	22 23       	and	r18, r18
   60f4e:	c1 f7       	brne	.-16     	; 0x60f40 <strtok_r+0x2e>
   60f50:	0d 90       	ld	r0, X+
   60f52:	00 20       	and	r0, r0
   60f54:	a1 f7       	brne	.-24     	; 0x60f3e <strtok_r+0x2c>
   60f56:	d0 01       	movw	r26, r0
   60f58:	fa 01       	movw	r30, r20
   60f5a:	a1 93       	st	Z+, r26
   60f5c:	b0 83       	st	Z, r27
   60f5e:	08 95       	ret

00060f60 <_exit>:
   60f60:	f8 94       	cli

00060f62 <__stop_program>:
   60f62:	ff cf       	rjmp	.-2      	; 0x60f62 <__stop_program>
